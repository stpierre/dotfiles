#!/bin/bash
#
# Enter one PR per commit on the current branch.
#
# Sleeps between each PR to avoid overloading CI. This branch is
# compared with either `master` or `main`, depending on which exists.
#
# https://github.com/github/hub must be installed and available on
# your $PATH.
#
# Install https://github.com/go-petname/petname for cuter branch names.

set -euo pipefail

SCRIPT=$(basename "$0")

usage() {
    cat <<EOUSAGE >&2
Usage: $SCRIPT [-R] [-s <sleep>]
Options:
  -s <sleep>: Sleep for <sleep> seconds between PRs. Default: 60
  -R: Do not reset the main git branch to its upstream before creating
      branches for the PRs.
EOUSAGE
}

sleep=60
reset=1
while getopts ":hRs:" opt; do
    case $opt in
        R)
            reset=
            ;;
        s)
            sleep=$OPTARG
            ;;
        h)
            usage
            exit 0
            ;;
        \?)
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

if ! command -v hub >& /dev/null; then
    echo "'hub' command not found in PATH. Please install it from https://github.com/github/hub!" >&2
    exit 2
fi

primary_branch=
for candidate in master main devel; do
    if git show-ref --verify --quiet refs/heads/"$candidate"; then
        primary_branch="$candidate"
        break
    fi
done
if [[ -z "$primary_branch" ]]; then
    echo "No primary branch found. Tried master, main, devel" 1>&2
    exit 2;
fi

if command -v petname >& /dev/null; then
    random_suffix() {
        petname
    }
else
    random_suffix() {
        date +%s
    }
fi

parent_branch=$(git rev-parse --abbrev-ref HEAD)

if [[ $reset -eq 1 ]]; then
    git checkout "$primary_branch"
    git reset --hard "@{upstream}"
    git fetch --all
    git fetch --tags --force
    git pull --rebase --ff-only
    git checkout "$parent_branch"
fi

remaining=$(git cherry "$primary_branch" | grep -c '^+')
git cherry "$primary_branch" | awk '/^+/ { print $NF }' | \
    while read -r hash; do
        suffix=$(git log -n 1 --pretty=format:%s "$hash" | \
                     sed -E 's/(\[([^][]*)\])?.*/\2/')
        if [[ -z $suffix ]]; then
            suffix=$(random_suffix)
        else
            suffix="$suffix"-"$(random_suffix)"
        fi

        git checkout "$primary_branch"
        git checkout -b "$parent_branch"-"$suffix"
        git cherry-pick "$hash"
        hub pull-request --push --no-edit --draft

        remaining=$((remaining - 1))
        if [[ $remaining -gt 0 ]]; then
            sleep "$sleep"
        fi
    done

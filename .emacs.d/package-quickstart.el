;;; Quickstart file to activate all packages at startup  -*- lexical-binding:t -*-
;; ¡¡ This file is autogenerated by `package-quickstart-refresh', DO NOT EDIT !!

(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/yaml-mode-0.0.15/yaml-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/yaml-mode-0.0.15/yaml-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/yaml-mode-0.0.15/yaml-mode-autoloads.el") (car load-path))))



(let ((loads (get 'yaml 'custom-loads))) (if (member '"yaml-mode" loads) nil (put 'yaml 'custom-loads (cons '"yaml-mode" loads))))

(autoload 'yaml-mode "yaml-mode" "\
Simple mode to edit YAML.

\\{yaml-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode))

(register-definition-prefixes "yaml-mode" '("yaml-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/window-jump-20170809.2208/window-jump-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/window-jump-20170809.2208/window-jump-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/window-jump-20170809.2208/window-jump-autoloads.el") (car load-path))))



(autoload 'window-jump-left "window-jump" "\
Move to the window to the left of the current window." t nil)

(autoload 'window-jump-right "window-jump" "\
Move to the window to the right of the current window." t nil)

(autoload 'window-jump-down "window-jump" "\
Move to the window below the current window." t nil)

(autoload 'window-jump-up "window-jump" "\
Move to the window above the current window." t nil)

(register-definition-prefixes "window-jump" '("-wj-inf" "window-jump" "wj-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/dash-20230714.723/dash-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/dash-20230714.723/dash-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/dash-20230714.723/dash-autoloads.el") (car load-path))))



(autoload 'dash-fontify-mode "dash" "\
Toggle fontification of Dash special variables.

This is a minor mode.  If called interactively, toggle the
`Dash-Fontify mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `dash-fontify-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

\(fn &optional ARG)" t nil)

(put 'global-dash-fontify-mode 'globalized-minor-mode t)

(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")

(custom-autoload 'global-dash-fontify-mode "dash" nil)

(autoload 'global-dash-fontify-mode "dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.

See `dash-fontify-mode' for more information on Dash-Fontify mode.

\(fn &optional ARG)" t nil)

(autoload 'dash-register-info-lookup "dash" "\
Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t nil)

(register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/s-20220902.1511/s-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/s-20220902.1511/s-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/s-20220902.1511/s-autoloads.el") (car load-path))))



(register-definition-prefixes "s" '("s-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/virtualenvwrapper-20190223.1919/virtualenvwrapper-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/virtualenvwrapper-20190223.1919/virtualenvwrapper-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/virtualenvwrapper-20190223.1919/virtualenvwrapper-autoloads.el") (car load-path))))



(autoload 'venv-projectile-auto-workon "virtualenvwrapper" "\
If a venv in the projetile root exists, activates it.
Set your common venvs names in `venv-dirlookup-names'" nil nil)

(autoload 'venv-deactivate "virtualenvwrapper" "\
Deactivate the current venv." t nil)

(autoload 'venv-set-location "virtualenvwrapper" "\
Set where to look for virtual environments to LOCATION.
This is useful e.g. when using tox.

\(fn &optional LOCATION)" t nil)

(autoload 'venv-workon "virtualenvwrapper" "\
Interactively switch to virtualenv NAME. Prompts for name if called
interactively.

\(fn &optional NAME)" t nil)

(autoload 'venv-mkvirtualenv-using "virtualenvwrapper" "\
Create new virtualenvs NAMES using INTERPRETER. If venv-location
is a single directory, the new virtualenvs are made there; if it
is a list of directories, the new virtualenvs are made in the
current `default-directory'.

\(fn INTERPRETER &rest NAMES)" t nil)

(autoload 'venv-mkvirtualenv "virtualenvwrapper" "\
Create new virtualenvs NAMES. If venv-location is a single
directory, the new virtualenvs are made there; if it is a list of
directories, the new virtualenvs are made in the current
`default-directory'.

\(fn &rest NAMES)" t nil)

(autoload 'venv-rmvirtualenv "virtualenvwrapper" "\
Delete virtualenvs NAMES.

\(fn &rest NAMES)" t nil)

(autoload 'venv-lsvirtualenv "virtualenvwrapper" "\
List all available virtualenvs in a temp buffer." t nil)

(autoload 'venv-cdvirtualenv "virtualenvwrapper" "\
Change to the directory of current virtualenv. If
SUBDIR is passed, append that to the path such that
we are immediately in that directory.

\(fn &optional SUBDIR)" t nil)

(autoload 'venv-cpvirtualenv "virtualenvwrapper" "\
Copy virtualenv NAME to NEWNAME. Any arguments not passed will be
prompted for This comes with the same caveat as cpvirtualenv in the
original virtualenvwrapper, which is that is far from guarenteed to
work well. Many packages hardcode absolute paths in various places an
will break if moved to a new location. Use with caution. If used with
a single virtualenv directory, behaves just like cpvirtualenv in
virtualenvwrapper.sh.  If used with virtualenvs spread around the
filesystem, creates the new virtualenv in the current default
directory.

\(fn &optional NAME NEWNAME)" t nil)

(autoload 'venv-shell-init "virtualenvwrapper" "\
Activate the current virtualenv in a newly opened shell.

\(fn PROCESS)" nil nil)

(autoload 'venv-initialize-interactive-shells "virtualenvwrapper" "\
Configure interactive shells for use with
virtualenvwrapper.el." nil nil)

(autoload 'venv-initialize-eshell "virtualenvwrapper" "\
Configure eshell for use with virtualenvwrapper.el." nil nil)

(register-definition-prefixes "virtualenvwrapper" '("venv-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/bind-key-20230203.2004/bind-key-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/bind-key-20230203.2004/bind-key-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/bind-key-20230203.2004/bind-key-autoloads.el") (car load-path))))



(autoload 'bind-key "bind-key" "\
Bind KEY-NAME to COMMAND in KEYMAP (`global-map' if not passed).

KEY-NAME may be a vector, in which case it is passed straight to
`define-key'.  Or it may be a string to be interpreted as
spelled-out keystrokes, e.g., \"C-c C-z\".  See the documentation
of `edmacro-mode' for details.

COMMAND must be an interactive function, lambda form, or a cons
`(STRING . DEFN)'.

KEYMAP, if present, should be a keymap variable or symbol.
For example:

  (bind-key \"M-h\" #\\='some-interactive-function my-mode-map)

  (bind-key \"M-h\" #\\='some-interactive-function \\='my-mode-map)

If PREDICATE is non-nil, it is a form evaluated to determine when
a key should be bound. It must return non-nil in such cases.
Emacs can evaluate this form at any time that it does redisplay
or operates on menu data structures, so you should write it so it
can safely be called at any time.

\(fn KEY-NAME COMMAND &optional KEYMAP PREDICATE)" nil t)

(autoload 'unbind-key "bind-key" "\
Unbind the given KEY-NAME, within the KEYMAP (if specified).
See `bind-key' for more details.

\(fn KEY-NAME &optional KEYMAP)" nil t)

(autoload 'bind-key* "bind-key" "\
Similar to `bind-key', but overrides any mode-specific bindings.

\(fn KEY-NAME COMMAND &optional PREDICATE)" nil t)

(autoload 'bind-keys "bind-key" "\
Bind multiple keys at once.

Accepts keyword arguments:
:map MAP               - a keymap into which the keybindings should be
                         added
:prefix KEY            - prefix key for these bindings
:prefix-map MAP        - name of the prefix map that should be created
                         for these bindings
:prefix-docstring STR  - docstring for the prefix-map variable
:menu-name NAME        - optional menu string for prefix map
:repeat-docstring STR  - docstring for the repeat-map variable
:repeat-map MAP        - name of the repeat map that should be created
                         for these bindings. If specified, the
                         `repeat-map' property of each command bound
                         (within the scope of the `:repeat-map' keyword)
                         is set to this map.
:exit BINDINGS         - Within the scope of `:repeat-map' will bind the
                         key in the repeat map, but will not set the
                         `repeat-map' property of the bound command.
:continue BINDINGS     - Within the scope of `:repeat-map' forces the
                         same behaviour as if no special keyword had
                         been used (that is, the command is bound, and
                         it's `repeat-map' property set)
:filter FORM           - optional form to determine when bindings apply

The rest of the arguments are conses of keybinding string and a
function symbol (unquoted).

\(fn &rest ARGS)" nil t)

(autoload 'bind-keys* "bind-key" "\
Bind multiple keys at once, in `override-global-map'.
Accepts the same keyword arguments as `bind-keys' (which see).

This binds keys in such a way that bindings are not overridden by
other modes.  See `override-global-mode'.

\(fn &rest ARGS)" nil t)

(autoload 'describe-personal-keybindings "bind-key" "\
Display all the personal keybindings defined by `bind-key'." t nil)

(register-definition-prefixes "bind-key" '("bind-key" "compare-keybindings" "get-binding-description" "override-global-m" "personal-keybindings"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/use-package-20230426.2324/use-package-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/use-package-20230426.2324/use-package-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/use-package-20230426.2324/use-package-autoloads.el") (car load-path))))



(autoload 'use-package-autoload-keymap "use-package-bind-key" "\
Load PACKAGE and bind key sequence invoking this function to KEYMAP-SYMBOL.
Then simulate pressing the same key sequence a again, so that the
next key pressed is routed to the newly loaded keymap.

This function supports use-package's :bind-keymap keyword.  It
works by binding the given key sequence to an invocation of this
function for a particular keymap.  The keymap is expected to be
defined by the package.  In this way, loading the package is
deferred until the prefix key sequence is pressed.

\(fn KEYMAP-SYMBOL PACKAGE OVERRIDE)" nil nil)

(autoload 'use-package-normalize-binder "use-package-bind-key" "\


\(fn NAME KEYWORD ARGS)" nil nil)

(defalias 'use-package-normalize/:bind 'use-package-normalize-binder)

(defalias 'use-package-normalize/:bind* 'use-package-normalize-binder)

(defalias 'use-package-autoloads/:bind 'use-package-autoloads-mode)

(defalias 'use-package-autoloads/:bind* 'use-package-autoloads-mode)

(autoload 'use-package-handler/:bind "use-package-bind-key" "\


\(fn NAME KEYWORD ARGS REST STATE &optional BIND-MACRO)" nil nil)

(defalias 'use-package-normalize/:bind-keymap 'use-package-normalize-binder)

(defalias 'use-package-normalize/:bind-keymap* 'use-package-normalize-binder)

(autoload 'use-package-handler/:bind-keymap "use-package-bind-key" "\


\(fn NAME KEYWORD ARGS REST STATE &optional OVERRIDE)" nil nil)

(autoload 'use-package-handler/:bind-keymap* "use-package-bind-key" "\


\(fn NAME KEYWORD ARG REST STATE)" nil nil)

(register-definition-prefixes "use-package-bind-key" '("use-package-handler/:bind*"))



(autoload 'use-package "use-package-core" "\
Declare an Emacs package by specifying a group of configuration options.

For the full documentation, see Info node `(use-package) top'.
Usage:

  (use-package package-name
     [:keyword [option]]...)

:init            Code to run before PACKAGE-NAME has been loaded.
:config          Code to run after PACKAGE-NAME has been loaded.  Note that
                 if loading is deferred for any reason, this code does not
                 execute until the lazy load has occurred.
:preface         Code to be run before everything except `:disabled'; this
                 can be used to define functions for use in `:if', or that
                 should be seen by the byte-compiler.

:mode            Form to be added to `auto-mode-alist'.
:magic           Form to be added to `magic-mode-alist'.
:magic-fallback  Form to be added to `magic-fallback-mode-alist'.
:interpreter     Form to be added to `interpreter-mode-alist'.

:commands        Define autoloads for commands that will be defined by the
                 package.  This is useful if the package is being lazily
                 loaded, and you wish to conditionally call functions in your
                 `:init' block that are defined in the package.
:autoload        Similar to :commands, but it for no-interactive one.
:hook            Specify hook(s) to attach this package to.

:bind            Bind keys, and define autoloads for the bound commands.
:bind*           Bind keys, and define autoloads for the bound commands,
                 *overriding all minor mode bindings*.
:bind-keymap     Bind a key prefix to an auto-loaded keymap defined in the
                 package.  This is like `:bind', but for keymaps.
:bind-keymap*    Like `:bind-keymap', but overrides all minor mode bindings

:defer           Defer loading of a package -- this is implied when using
                 `:commands', `:bind', `:bind*', `:mode', `:magic', `:hook',
                 `:magic-fallback', or `:interpreter'.  This can be an integer,
                 to force loading after N seconds of idle time, if the package
                 has not already been loaded.
:demand          Prevent the automatic deferred loading introduced by constructs
                 such as `:bind' (see `:defer' for the complete list).

:after           Delay the effect of the use-package declaration
                 until after the named libraries have loaded.
                 Before they have been loaded, no other keyword
                 has any effect at all, and once they have been
                 loaded it is as if `:after' was not specified.

:if EXPR         Initialize and load only if EXPR evaluates to a non-nil value.
:disabled        The package is ignored completely if this keyword is present.
:defines         Declare certain variables to silence the byte-compiler.
:functions       Declare certain functions to silence the byte-compiler.
:load-path       Add to the `load-path' before attempting to load the package.
:diminish        Support for diminish.el (if installed).
:delight         Support for delight.el (if installed).
:custom          Call `Custom-set' or `set-default' with each variable
                 definition without modifying the Emacs `custom-file'.
                 (compare with `custom-set-variables').
:custom-face     Call `custom-set-faces' with each face definition.
:ensure          Loads the package using package.el if necessary.
:pin             Pin the package to an archive.

\(fn NAME &rest ARGS)" nil t)

(function-put 'use-package 'lisp-indent-function 'defun)

(register-definition-prefixes "use-package-core" '("use-package-"))



(autoload 'use-package-normalize/:delight "use-package-delight" "\
Normalize arguments to delight.

\(fn NAME KEYWORD ARGS)" nil nil)

(autoload 'use-package-handler/:delight "use-package-delight" "\


\(fn NAME KEYWORD ARGS REST STATE)" nil nil)

(register-definition-prefixes "use-package-delight" '("use-package-normalize-delight"))



(autoload 'use-package-normalize/:diminish "use-package-diminish" "\


\(fn NAME KEYWORD ARGS)" nil nil)

(autoload 'use-package-handler/:diminish "use-package-diminish" "\


\(fn NAME KEYWORD ARG REST STATE)" nil nil)

(register-definition-prefixes "use-package-diminish" '("use-package-normalize-diminish"))



(autoload 'use-package-normalize/:ensure "use-package-ensure" "\


\(fn NAME KEYWORD ARGS)" nil nil)

(autoload 'use-package-handler/:ensure "use-package-ensure" "\


\(fn NAME KEYWORD ENSURE REST STATE)" nil nil)

(register-definition-prefixes "use-package-ensure" '("use-package-"))



(autoload 'use-package-jump-to-package-form "use-package-jump" "\
Attempt to find and jump to the `use-package' form that loaded PACKAGE.
This will only find the form if that form actually required
PACKAGE.  If PACKAGE was previously required then this function
will jump to the file that originally required PACKAGE instead.

\(fn PACKAGE)" t nil)

(register-definition-prefixes "use-package-jump" '("use-package-find-require"))



(autoload 'use-package-lint "use-package-lint" "\
Check for errors in `use-package' declarations.
For example, if the module's `:if' condition is met, but even
with the specified `:load-path' the module cannot be found." t nil)

(register-definition-prefixes "use-package-lint" '("use-package-lint-declaration"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/compat-29.1.4.2/compat-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/compat-29.1.4.2/compat-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/compat-29.1.4.2/compat-autoloads.el") (car load-path))))



(register-definition-prefixes "compat" '("compat-"))



(register-definition-prefixes "compat-macs" '("compat-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/transient-20230723.1411/transient-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/transient-20230723.1411/transient-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/transient-20230723.1411/transient-autoloads.el") (car load-path))))



(autoload 'transient-insert-suffix "transient" "\
Insert a SUFFIX into PREFIX before LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
Remove a conflicting binding unless optional KEEP-OTHER is
  non-nil.
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)" nil nil)

(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)

(autoload 'transient-append-suffix "transient" "\
Insert a SUFFIX into PREFIX after LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
Remove a conflicting binding unless optional KEEP-OTHER is
  non-nil.
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)" nil nil)

(function-put 'transient-append-suffix 'lisp-indent-function 'defun)

(autoload 'transient-replace-suffix "transient" "\
Replace the suffix at LOC in PREFIX with SUFFIX.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX)" nil nil)

(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)

(autoload 'transient-remove-suffix "transient" "\
Remove the suffix or group at LOC in PREFIX.
PREFIX is a prefix command, a symbol.
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC)" nil nil)

(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)

(register-definition-prefixes "transient" '("transient"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/hcl-mode-20230302.1029/hcl-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/hcl-mode-20230302.1029/hcl-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/hcl-mode-20230302.1029/hcl-mode-autoloads.el") (car load-path))))



(autoload 'hcl-mode "hcl-mode" "\
Major mode for editing hcl configuration file

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.hcl\\'" . hcl-mode))

(add-to-list 'auto-mode-alist '("\\.nomad\\'" . hcl-mode))

(register-definition-prefixes "hcl-mode" '("hcl-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/terraform-mode-20230607.1923/terraform-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/terraform-mode-20230607.1923/terraform-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/terraform-mode-20230607.1923/terraform-mode-autoloads.el") (car load-path))))



(autoload 'terraform-mode "terraform-mode" "\
Major mode for editing terraform configuration file

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.tf\\(vars\\)?\\'" . terraform-mode))

(register-definition-prefixes "terraform-mode" '("terraform-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/reformatter-20220627.825/reformatter-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/reformatter-20220627.825/reformatter-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/reformatter-20220627.825/reformatter-autoloads.el") (car load-path))))



(autoload 'reformatter-define "reformatter" "\
Define a reformatter command with NAME.

When called, the reformatter will use PROGRAM and any ARGS to
reformat the current buffer.  The contents of the buffer will be
passed as standard input to the reformatter, which should output
them to standard output.  A nonzero exit code will be reported as
failure, and the output of the command to standard error will be
displayed to the user.

The macro accepts the following keyword arguments:

PROGRAM (required)

  Provides a form which should evaluate to a string at runtime,
  e.g. a literal string, or the name of a variable which holds
  the program path.

ARGS

  Command-line arguments for the program.  If provided, this is a
  form which evaluates to a list of strings at runtime.  Default
  is the empty list.  This form is evaluated at runtime so that
  you can use buffer-local variables to influence the args passed
  to the reformatter program: the variable `input-file' will be
  lexically bound to the path of a file containing the text to be
  reformatted: see the keyword options INPUT-FILE, STDIN and
  STDOUT for more information.

STDIN

  When non-nil (the default), the program is passed the input
  data on stdin.  Set this to nil when your reformatter can only
  operate on files in place.  In such a case, your ARGS should
  include a reference to the `input-file' variable, which will be
  bound to an input path when evaluated.

STDOUT

  When non-nil (the default), the program is expected to write
  the reformatted text to stdout.  Set this to nil if your
  reformatter can only operate on files in place, in which case
  the contents of the temporary input file will be used as the
  replacement text.

INPUT-FILE

  Sometimes your reformatter program might expect files to be in
  a certain directory or have a certain file extension.  This option
  lets you handle that.

  If provided, it is a form which will be evaluated before each
  run of the formatter, and is expected to return a temporary
  file path suitable for holding the region to be reformatted.
  It must not produce the same path as the current buffer's file
  if that is set: you shouldn't be operating directly on the
  buffer's backing file.  The temporary input file will be
  deleted automatically.  You might find the function
  `reformatter-temp-file-in-current-directory' helpful.

MODE

  Unless nil, also generate a minor mode that will call the
  reformatter command from `before-save-hook' when enabled.
  Default is t.

GROUP

  If provided, this is the custom group used for any generated
  modes or custom variables.  Don't forget to declare this group
  using a `defgroup' form.

LIGHTER

  If provided, this is a mode lighter string which will be used
  for the \"-on-save\" minor mode.  It should have a leading
  space.  The supplied value will be used as the default for a
  generated custom variable which specifies the mode lighter.
  Default is nil, ie. no lighter.

KEYMAP

  If provided, this is the symbol name of the \"-on-save\" mode's
  keymap, which you must declare yourself.  Default is no keymap.

EXIT-CODE-SUCCESS-P

  If provided, this is a function object callable with `funcall'
  which accepts an integer process exit code, and returns non-nil
  if that exit code is considered successful.  This could be a
  lambda, quoted symbol or sharp-quoted symbol.  If not supplied,
  the code is considered successful if it is `zerop'.

\(fn NAME &key PROGRAM ARGS (MODE t) (STDIN t) (STDOUT t) INPUT-FILE LIGHTER KEYMAP GROUP (EXIT-CODE-SUCCESS-P \\='zerop))" nil t)

(function-put 'reformatter-define 'lisp-indent-function 'defun)

(register-definition-prefixes "reformatter" '("reformatter-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/sqlformat-20230808.543/sqlformat-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/sqlformat-20230808.543/sqlformat-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/sqlformat-20230808.543/sqlformat-autoloads.el") (car load-path))))


 (autoload 'sqlformat-buffer "sqlformat" nil t)
 (autoload 'sqlformat-region "sqlformat" nil t)
 (autoload 'sqlformat-on-save-mode "sqlformat" nil t)

(autoload 'sqlformat "sqlformat" "\
Reformat SQL in region from BEG to END using `sqlformat-region'.
If no region is active, the current statement (paragraph) is reformatted.
Install the \"sqlparse\" (Python) package to get \"sqlformat\", or
\"pgformatter\" to get \"pg_format\", or install the \"sqlfluff\" (Python) 
package to get \"sqlfluff\".

\(fn BEG END)" t nil)

(register-definition-prefixes "sqlformat" '("sqlformat-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/sphinx-doc-20210213.1250/sphinx-doc-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/sphinx-doc-20210213.1250/sphinx-doc-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/sphinx-doc-20210213.1250/sphinx-doc-autoloads.el") (car load-path))))



(autoload 'sphinx-doc-mode "sphinx-doc" "\
Sphinx friendly docstring generation for Python code.

This is a minor mode.  If called interactively, toggle the
`Sphinx-Doc mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sphinx-doc-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "sphinx-doc" '("sphinx-doc"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/solarized-theme-20230507.1413/solarized-theme-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/solarized-theme-20230507.1413/solarized-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/solarized-theme-20230507.1413/solarized-theme-autoloads.el") (car load-path))))



(autoload 'solarized-color-blend "solarized" "\
Blends COLOR1 onto COLOR2 with ALPHA.

COLOR1 and COLOR2 should be color names (e.g. \"white\") or RGB
triplet strings (e.g. \"#ff12ec\").

Alpha should be a float between 0 and 1.

Optional argument DIGITS-PER-COMPONENT can be either 4 (the default) or 2;
use the latter if you need a 24-bit specification of a color.

\(fn COLOR1 COLOR2 ALPHA &optional DIGITS-PER-COMPONENT)" nil nil)

(autoload 'solarized-create-color-palette "solarized" "\
Create color-palette from CORE-PALETTE.

The Returned color-palette has the same format as `solarized-color-palette'

\(fn CORE-PALETTE)" nil nil)

(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "solarized" '("solarized-"))



(register-definition-prefixes "solarized-dark-high-contrast-theme" '("solarized-dark-high-contrast"))



(register-definition-prefixes "solarized-dark-theme" '("solarized-dark"))



(register-definition-prefixes "solarized-faces" '("solarized-definition"))



(register-definition-prefixes "solarized-gruvbox-dark-theme" '("solarized-gruvbox-dark"))



(register-definition-prefixes "solarized-gruvbox-light-theme" '("solarized-gruvbox-light"))



(register-definition-prefixes "solarized-light-high-contrast-theme" '("solarized-light-high-contrast"))



(register-definition-prefixes "solarized-light-theme" '("solarized-light"))



(register-definition-prefixes "solarized-palettes" '("solarized-"))



(register-definition-prefixes "solarized-selenized-black-theme" '("solarized-selenized-black"))



(register-definition-prefixes "solarized-selenized-dark-theme" '("solarized-selenized-dark"))



(register-definition-prefixes "solarized-selenized-light-theme" '("solarized-selenized-light"))



(register-definition-prefixes "solarized-selenized-white-theme" '("solarized-selenized-white"))



(register-definition-prefixes "solarized-theme-utils" '("solarized-import-faces"))



(register-definition-prefixes "solarized-wombat-dark-theme" '("solarized-wombat-dark"))



(register-definition-prefixes "solarized-zenburn-theme" '("solarized-zenburn"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/scss-mode-20180123.1708/scss-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/scss-mode-20180123.1708/scss-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/scss-mode-20180123.1708/scss-mode-autoloads.el") (car load-path))))



(autoload 'scss-mode "scss-mode" "\
Major mode for editing SCSS files, http://sass-lang.com/
Special commands:
\\{scss-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))

(register-definition-prefixes "scss-mode" '("flymake-scss-init" "scss-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/rpm-spec-mode-20160710.1136/rpm-spec-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/rpm-spec-mode-20160710.1136/rpm-spec-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/rpm-spec-mode-20160710.1136/rpm-spec-mode-autoloads.el") (car load-path))))



(autoload 'rpm-spec-mode "rpm-spec-mode" "\
Major mode for editing RPM spec files.
This is much like C mode except for the syntax of comments.  It uses
the same keymap as C mode and has the same variables for customizing
indentation.  It has its own abbrev table and its own syntax table.

Turning on RPM spec mode calls the value of the variable `rpm-spec-mode-hook'
with no args, if that value is non-nil." t nil)
(add-to-list 'auto-mode-alist '("\\.spec\\(\\.in\\)?$" . rpm-spec-mode))

(autoload 'rpmbuild-mode "rpm-spec-mode" "\


\(fn)" nil nil)

(register-definition-prefixes "rpm-spec-mode" '("rpm-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/pyvenv-20211014.707/pyvenv-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/pyvenv-20211014.707/pyvenv-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/pyvenv-20211014.707/pyvenv-autoloads.el") (car load-path))))



(autoload 'pyvenv-activate "pyvenv" "\
Activate the virtual environment in DIRECTORY.

\(fn DIRECTORY)" t nil)

(autoload 'pyvenv-deactivate "pyvenv" "\
Deactivate any current virtual environment." t nil)

(autoload 'pyvenv-workon "pyvenv" "\
Activate a virtual environment from $WORKON_HOME.

If the virtual environment NAME is already active, this function
does not try to reactivate the environment.

\(fn NAME)" t nil)

(defvar pyvenv-mode nil "\
Non-nil if Pyvenv mode is enabled.
See the `pyvenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-mode'.")

(custom-autoload 'pyvenv-mode "pyvenv" nil)

(autoload 'pyvenv-mode "pyvenv" "\
Global minor mode for pyvenv.

This is a minor mode.  If called interactively, toggle the
`Pyvenv mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyvenv-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

Will show the current virtualenv in the mode line, and respect a
`pyvenv-workon' setting in files.

\(fn &optional ARG)" t nil)

(defvar pyvenv-tracking-mode nil "\
Non-nil if Pyvenv-Tracking mode is enabled.
See the `pyvenv-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-tracking-mode'.")

(custom-autoload 'pyvenv-tracking-mode "pyvenv" nil)

(autoload 'pyvenv-tracking-mode "pyvenv" "\
Global minor mode to track the current virtualenv.

This is a minor mode.  If called interactively, toggle the
`Pyvenv-Tracking mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyvenv-tracking-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When this mode is active, pyvenv will activate a buffer-specific
virtualenv whenever the user switches to a buffer with a
buffer-local `pyvenv-workon' or `pyvenv-activate' variable.

\(fn &optional ARG)" t nil)

(autoload 'pyvenv-restart-python "pyvenv" "\
Restart Python inferior processes." t nil)

(register-definition-prefixes "pyvenv" '("pyvenv-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/f-20230704.1346/f-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/f-20230704.1346/f-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/f-20230704.1346/f-autoloads.el") (car load-path))))



(register-definition-prefixes "f" '("f-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/pythonic-20220723.1741/pythonic-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/pythonic-20220723.1741/pythonic-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/pythonic-20220723.1741/pythonic-autoloads.el") (car load-path))))



(autoload 'pythonic-activate "pythonic" "\
Activate python VIRTUALENV.

\(fn VIRTUALENV)" t nil)

(autoload 'pythonic-deactivate "pythonic" "\
Deactivate python virtual environment." t nil)

(register-definition-prefixes "pythonic" '("pythonic-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/python-mode-20230702.625/python-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/python-mode-20230702.625/python-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/python-mode-20230702.625/python-mode-autoloads.el") (car load-path))))



(register-definition-prefixes "python-mode" '("all-mode-setting" "autopair-mode" "flake8" "force-py-shell-name-p-o" "highlight-indent-active" "hs-hide-comments-when-hiding-all" "info-lookup-mode" "ipython" "isympy3" "iypthon" "jython" "pdb-track-stack-from-shell-p" "pep8" "pst-here" "strip-chars-" "toggle-force-py-shell-name-p" "turn-o" "virtualenv-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/deferred-20170901.1330/deferred-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/deferred-20170901.1330/deferred-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/deferred-20170901.1330/deferred-autoloads.el") (car load-path))))



(register-definition-prefixes "deferred" '("deferred:"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/python-environment-20150310.853/python-environment-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/python-environment-20150310.853/python-environment-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/python-environment-20150310.853/python-environment-autoloads.el") (car load-path))))



(register-definition-prefixes "python-environment" '("python-environment-"))



(register-definition-prefixes "test-python-environment" '("pye-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/python-black-20230313.1037/python-black-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/python-black-20230313.1037/python-black-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/python-black-20230313.1037/python-black-autoloads.el") (car load-path))))


 (autoload 'python-black-buffer "python-black" nil t)
 (autoload 'python-black-region "python-black" nil t)
 (autoload 'python-black-on-save-mode "python-black" nil t)

(autoload 'python-black-on-save-mode-enable-dwim "python-black" "\
Enable ‘python-black-on-save-mode’ if appropriate." t nil)

(autoload 'python-black-statement "python-black" "\
Reformats the current statement.

When called interactively with a prefix argument, or when
DISPLAY-ERRORS is non-nil, shows a buffer if the formatting fails.

\(fn &optional DISPLAY-ERRORS)" t nil)

(autoload 'python-black-partial-dwim "python-black" "\
Reformats the active region or the current statement.

This runs ‘python-black-region’ or ‘python-black-statement’ depending
on whether the region is currently active.

When called interactively with a prefix argument, or when
DISPLAY-ERRORS is non-nil, shows a buffer if the formatting fails.

\(fn &optional DISPLAY-ERRORS)" t nil)

(autoload 'python-black-org-mode-block "python-black" "\
Reformats the current `org-mode' source block.
When called interactively, or with prefix argument
DISPLAY-ERRORS, shows a buffer if the formatting fails.

\(fn &optional DISPLAY-ERRORS)" t nil)

(register-definition-prefixes "python-black" '("python-black-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/pyenv-mode-20200518.1521/pyenv-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/pyenv-mode-20200518.1521/pyenv-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/pyenv-mode-20200518.1521/pyenv-mode-autoloads.el") (car load-path))))



(autoload 'pyenv-mode-set "pyenv-mode" "\
Set python shell VERSION.

\(fn VERSION)" t nil)

(autoload 'pyenv-mode-unset "pyenv-mode" "\
Unset python shell version." t nil)

(defvar pyenv-mode nil "\
Non-nil if Pyenv mode is enabled.
See the `pyenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyenv-mode'.")

(custom-autoload 'pyenv-mode "pyenv-mode" nil)

(autoload 'pyenv-mode "pyenv-mode" "\
Minor mode for pyenv interaction.

This is a minor mode.  If called interactively, toggle the `Pyenv
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyenv-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{pyenv-mode-map}

\(fn &optional ARG)" t nil)

(register-definition-prefixes "pyenv-mode" '("pyenv-mode-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/py-isort-20160925.1018/py-isort-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/py-isort-20160925.1018/py-isort-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/py-isort-20160925.1018/py-isort-autoloads.el") (car load-path))))



(autoload 'py-isort-region "py-isort" "\
Uses the \"isort\" tool to reformat the current region." t nil)

(autoload 'py-isort-buffer "py-isort" "\
Uses the \"isort\" tool to reformat the current buffer." t nil)

(autoload 'py-isort-before-save "py-isort" nil t nil)

(register-definition-prefixes "py-isort" '("py-isort-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/popup-20221231.1634/popup-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/popup-20221231.1634/popup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/popup-20221231.1634/popup-autoloads.el") (car load-path))))



(register-definition-prefixes "popup" '("popup-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/epl-20180205.2049/epl-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/epl-20180205.2049/epl-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/epl-20180205.2049/epl-autoloads.el") (car load-path))))



(register-definition-prefixes "epl" '("epl-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/pkg-info-20150517.1143/pkg-info-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/pkg-info-20150517.1143/pkg-info-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/pkg-info-20150517.1143/pkg-info-autoloads.el") (car load-path))))



(autoload 'pkg-info-library-original-version "pkg-info" "\
Get the original version in the header of LIBRARY.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no X-Original-Version
header.

See Info node `(elisp)Library Headers' for more information
about library headers.

\(fn LIBRARY &optional SHOW)" t nil)

(autoload 'pkg-info-library-version "pkg-info" "\
Get the version in the header of LIBRARY.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no proper header.

See Info node `(elisp)Library Headers' for more information
about library headers.

\(fn LIBRARY &optional SHOW)" t nil)

(autoload 'pkg-info-defining-library-original-version "pkg-info" "\
Get the original version of the library defining FUNCTION.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

\(fn FUNCTION &optional SHOW)" t nil)

(autoload 'pkg-info-defining-library-version "pkg-info" "\
Get the version of the library defining FUNCTION.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

\(fn FUNCTION &optional SHOW)" t nil)

(autoload 'pkg-info-package-version "pkg-info" "\
Get the version of an installed PACKAGE.

If SHOW is non-nil, show the version in the minibuffer.

Return the version as list, or nil if PACKAGE is not installed.

\(fn PACKAGE &optional SHOW)" t nil)

(autoload 'pkg-info-version-info "pkg-info" "\
Obtain complete version info for LIBRARY and PACKAGE.

LIBRARY is a symbol denoting a named feature, or a library name
as string.  PACKAGE is a symbol denoting an ELPA package.  If
omitted or nil, default to LIBRARY.

If SHOW is non-nil, show the version in the minibuffer.

When called interactively, prompt for LIBRARY.  When called
interactively with prefix argument, prompt for PACKAGE as well.

Return a string with complete version information for LIBRARY.
This version information contains the version from the headers of
LIBRARY, and the version of the installed PACKAGE, the LIBRARY is
part of.  If PACKAGE is not installed, or if the PACKAGE version
is the same as the LIBRARY version, do not include a package
version.

\(fn LIBRARY &optional PACKAGE SHOW)" t nil)

(register-definition-prefixes "pkg-info" '("pkg-info-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/magit-section-20230731.912/magit-section-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/magit-section-20230731.912/magit-section-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/magit-section-20230731.912/magit-section-autoloads.el") (car load-path))))



(register-definition-prefixes "magit-section" '("isearch-clean-overlays@magit-mode" "magit-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/nix-mode-20230421.2036/nix-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/nix-mode-20230421.2036/nix-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/nix-mode-20230421.2036/nix-mode-autoloads.el") (car load-path))))



(autoload 'pcomplete/nix "nix" "\
Completion for the nix command." nil nil)

(register-definition-prefixes "nix" '("nix-"))



(autoload 'nix-build "nix-build" "\
Run nix-build in a compilation buffer.
FILE the file to parse.
ATTR the attribute to build.

\(fn &optional FILE ATTR)" t nil)



(autoload 'nix-drv-mode "nix-drv-mode" "\
Pretty print Nix’s .drv files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("^/nix/store/.+\\.drv\\'" . nix-drv-mode))

(register-definition-prefixes "nix-drv-mode" '("nix-drv-mode-dejsonify-buffer"))



(autoload 'nix-edit "nix-edit" "\
Open the nix log.
FILE the nix file to load from.
ATTR the attribute to find in nix expressions.

\(fn &optional FILE ATTR)" t nil)


 (autoload 'nix-flake-dispatch "nix-flake" nil t)

(autoload 'nix-flake "nix-flake" "\
Dispatch a transient interface for Nix commands.

DIR is a directory on the file system in which flake.nix resides.

Alternatively, you can specify FLAKE-REF which follows the syntax
of flake-url. It can refer to a remote url, a local file path, or
whatever supported by Nix.

\(fn DIR &key FLAKE-REF)" t nil)
 (autoload 'nix-flake-init "nix-flake" nil t)

(autoload 'nix-flake-init "nix-flake" "\
Run \"nix flake init\" command via a transient interface." t nil)

(add-to-list 'auto-mode-alist '("\\flake.lock\\'" . js-mode))

(register-definition-prefixes "nix-flake" '("nix-flake-"))



(autoload 'nix-format-before-save "nix-format" "\
Add this to `before-save-hook' to run nixfmt when saving." nil nil)

(register-definition-prefixes "nix-format" '("nix-"))



(register-definition-prefixes "nix-instantiate" '("nix-instantiate"))



(autoload 'nix-log "nix-log" "\
Open the nix log.
FILE nix file to parse.
ATTR attribute to load the log of.

\(fn FILE ATTR)" t nil)

(register-definition-prefixes "nix-log" '("nix-log-path"))



(autoload 'nix-mode-format "nix-mode" "\
Format the entire `nix-mode' buffer." t nil)

(autoload 'nix-indent-line "nix-mode" "\
Indent current line in a Nix expression." t nil)

(autoload 'nix-indent-region "nix-mode" "\
Indent on a whole region. Enabled by default.
START where to start in region.
END where to end the region.

\(fn START END)" t nil)

(autoload 'nix-mode-ffap-nixpkgs-path "nix-mode" "\
Support `ffap' for <nixpkgs> declarations.
If STR contains brackets, call `nix-instantiate' to find the
location of STR. If `nix-instantiate' has a nonzero exit code,
don’t do anything

\(fn STR)" nil nil)

(autoload 'nix-mode "nix-mode" "\
Major mode for editing Nix expressions.

The following commands may be useful:

  '\\[newline-and-indent]'
    Insert a newline and move the cursor to align with the previous
    non-empty line.

  '\\[fill-paragraph]'
    Refill a paragraph so that all lines are at most `fill-column'
    lines long.  This should do the right thing for comments beginning
    with `#'.  However, this command doesn't work properly yet if the
    comment is adjacent to code (i.e., no intervening empty lines).
    In that case, select the text to be refilled and use
    `\\[fill-region]' instead.

The hook `nix-mode-hook' is run when Nix mode is started.

\\{nix-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))

(register-definition-prefixes "nix-mode" '("nix-"))



(autoload 'nix-prettify-mode "nix-prettify-mode" "\
Toggle Nix Prettify mode.

With a prefix argument ARG, enable Nix Prettify mode if ARG is
positive, and disable it otherwise. If called from Lisp, enable
the mode if ARG is omitted or nil.

When Nix Prettify mode is enabled, hash-parts of the Nix store
file names (see `nix-prettify-regexp') are prettified,
i.e. displayed as `nix-prettify-char' character.  This mode can
be enabled programmatically using hooks:

  (add-hook 'shell-mode-hook 'nix-prettify-mode)

It is possible to enable the mode in any buffer, however not any
buffer's highlighting may survive after adding new elements to
`font-lock-keywords' (see `nix-prettify-special-modes' for
details).

Also you can use `global-nix-prettify-mode' to enable Nix
Prettify mode for all modes that support font-locking.

\(fn &optional ARG)" t nil)

(put 'nix-prettify-global-mode 'globalized-minor-mode t)

(defvar nix-prettify-global-mode nil "\
Non-nil if Nix-Prettify-Global mode is enabled.
See the `nix-prettify-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `nix-prettify-global-mode'.")

(custom-autoload 'nix-prettify-global-mode "nix-prettify-mode" nil)

(autoload 'nix-prettify-global-mode "nix-prettify-mode" "\
Toggle Nix-Prettify mode in all buffers.
With prefix ARG, enable Nix-Prettify-Global mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Nix-Prettify mode is enabled in all buffers where
`nix-prettify-turn-on' would do it.

See `nix-prettify-mode' for more information on Nix-Prettify mode.

\(fn &optional ARG)" t nil)

(define-obsolete-function-alias 'global-nix-prettify-mode 'nix-prettify-global-mode "v1.2.2")

(register-definition-prefixes "nix-prettify-mode" '("nix-prettify-"))



(autoload 'nix-repl "nix-repl" "\
Load the Nix-REPL." t nil)

(autoload 'nix-repl-completion-at-point "nix-repl" "\
Completion at point function for Nix using \"nix-repl\".
See `completion-at-point-functions'." nil nil)

(register-definition-prefixes "nix-repl" '("nix-"))



(autoload 'nix-search--search "nix-search" "\


\(fn SEARCH FILE &optional NO-CACHE USE-FLAKES)" nil nil)

(autoload 'nix-search--display "nix-search" "\


\(fn RESULTS &optional DISPLAY-BUFFER USE-FLAKES SEARCH FILE)" nil nil)

(autoload 'nix-search "nix-search" "\
Run nix search.
SEARCH a search term to use.
FILE a Nix expression to search in.

\(fn SEARCH &optional FILE DISPLAY-BUFFER)" t nil)

(register-definition-prefixes "nix-search" '("nix-search-"))



(register-definition-prefixes "nix-shebang" '("nix-shebang-"))



(autoload 'nix-shell-unpack "nix-shell" "\
Run Nix’s unpackPhase.
FILE is the file to unpack from.
ATTR is the attribute to unpack.

\(fn FILE ATTR)" t nil)

(autoload 'nix-shell-configure "nix-shell" "\
Run Nix’s configurePhase.
FILE is the file to configure from.
ATTR is the attribute to configure.

\(fn FILE ATTR)" t nil)

(autoload 'nix-shell-build "nix-shell" "\
Run Nix’s buildPhase.
FILE is the file to build from.
ATTR is the attribute to build.

\(fn FILE ATTR)" t nil)

(autoload 'nix-eshell-with-packages "nix-shell" "\
Create an Eshell buffer that has the shell environment in it.
PACKAGES a list of packages to pull in.
PKGS-FILE a file to use to get the packages.

\(fn PACKAGES &optional PKGS-FILE)" nil nil)

(autoload 'nix-eshell "nix-shell" "\
Create an Eshell buffer that has the shell environment in it.
FILE the .nix expression to create a shell for.
ATTR attribute to instantiate in NIX-FILE.

\(fn FILE &optional ATTR)" t nil)

(autoload 'nix-shell-with-string "nix-shell" "\
A nix-shell emulator in Emacs from a string.
STRING the nix expression to use.

\(fn STRING)" nil nil)

(autoload 'nix-shell "nix-shell" "\
A nix-shell emulator in Emacs.
FILE the file to instantiate.
ATTR an attribute of the Nix file to use.

\(fn FILE &optional ATTR)" t nil)

(register-definition-prefixes "nix-shell" '("nix-"))



(register-definition-prefixes "nix-store" '("nix-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/markdown-mode-20230723.1139/markdown-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/markdown-mode-20230723.1139/markdown-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/markdown-mode-20230723.1139/markdown-mode-autoloads.el") (car load-path))))



(autoload 'markdown-mode "markdown-mode" "\
Major mode for editing Markdown files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

\(fn)" t nil)

(autoload 'markdown-view-mode "markdown-mode" "\
Major mode for viewing Markdown content.

\(fn)" t nil)

(autoload 'gfm-view-mode "markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

\(fn)" t nil)

(autoload 'markdown-live-preview-mode "markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

This is a minor mode.  If called interactively, toggle the
`Markdown-Live-Preview mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `markdown-live-preview-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/legalese-20200119.2248/legalese-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/legalese-20200119.2248/legalese-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/legalese-20200119.2248/legalese-autoloads.el") (car load-path))))



(autoload 'legalese "legalese" "\
Add standard legalese prelude to the current buffer.

With prefix-argument ASK, ask for a license to use.

\(fn ASK)" t nil)

(register-definition-prefixes "legalese" '("legalese-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/know-your-http-well-20160208.2305/know-your-http-well-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/know-your-http-well-20160208.2305/know-your-http-well-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/know-your-http-well-20160208.2305/know-your-http-well-autoloads.el") (car load-path))))



(autoload 'http-header "http-headers" "\
Display the meaning of an HTTP header

\(fn HEADER)" t nil)

(register-definition-prefixes "http-headers" '("http-headers"))



(autoload 'http-method "http-methods" "\
Display the meaning of an HTTP method

\(fn METHOD)" t nil)

(register-definition-prefixes "http-methods" '("http-methods"))



(autoload 'http-relation "http-relations" "\
Display the meaning of an HTTP relation

\(fn RELATION)" t nil)

(register-definition-prefixes "http-relations" '("http-relations"))



(autoload 'http-status-code "http-status-codes" "\
Display the meaning of an HTTP status code or phrase

\(fn STATUS)" t nil)

(register-definition-prefixes "http-status-codes" '("http-status"))



(autoload 'media-type "media-types" "\
Display the template of a media-type

\(fn MEDIA-TYPE)" t nil)

(register-definition-prefixes "media-types" '("media-types"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/just-mode-20230303.2255/just-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/just-mode-20230303.2255/just-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/just-mode-20230303.2255/just-mode-autoloads.el") (car load-path))))



(autoload 'just-mode "just-mode" "\
Major mode for editing standard Justfiles.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("/[Jj]ustfile\\'" . just-mode))

(add-to-list 'auto-mode-alist '("\\.[Jj]ust\\(file\\)?\\'" . just-mode))

(register-definition-prefixes "just-mode" '("just-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/json-mode-0.2/json-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/json-mode-0.2/json-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/json-mode-0.2/json-mode-autoloads.el") (car load-path))))



(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))

(autoload 'json-mode "json-mode" "\
Major mode for editing JavaScript Object Notation (JSON) data files.

\(fn)" t nil)

(register-definition-prefixes "json-mode" '("json-"))


)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/concurrent-20170601.435/concurrent-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/concurrent-20170601.435/concurrent-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/concurrent-20170601.435/concurrent-autoloads.el") (car load-path))))



(register-definition-prefixes "concurrent" '("cc:"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/ctable-20210128.629/ctable-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/ctable-20210128.629/ctable-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/ctable-20210128.629/ctable-autoloads.el") (car load-path))))



(register-definition-prefixes "ctable" '("ctbl:"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/epc-20140610.534/epc-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/epc-20140610.534/epc-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/epc-20140610.534/epc-autoloads.el") (car load-path))))



(register-definition-prefixes "epc" '("epc:"))



(register-definition-prefixes "epcs" '("epcs:"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/jedi-core-20210503.1315/jedi-core-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/jedi-core-20210503.1315/jedi-core-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/jedi-core-20210503.1315/jedi-core-autoloads.el") (car load-path))))



(autoload 'jedi:start-dedicated-server "jedi-core" "\
Start Jedi server dedicated to this buffer.
This is useful, for example, when you want to use different
`sys.path' for some buffer.  When invoked as an interactive
command, it asks you how to start the Jedi server.  You can edit
the command in minibuffer to specify the way Jedi server run.

If you want to setup how Jedi server is started programmatically
per-buffer/per-project basis, make `jedi:server-command' and
`jedi:server-args' buffer local and set it in `python-mode-hook'.
See also: `jedi:server-args'.

\(fn COMMAND)" t nil)

(autoload 'helm-jedi-related-names "jedi-core" "\
Find related names of the object at point using `helm' interface." t nil)

(autoload 'anything-jedi-related-names "jedi-core" "\
Find related names of the object at point using `anything' interface." t nil)

(autoload 'jedi:setup "jedi-core" "\
Fully setup jedi.el for current buffer.
It setups `ac-sources' or `company-backends' and turns
`jedi-mode' on.

This function is intended to be called from `python-mode-hook',
like this::

       (add-hook 'python-mode-hook 'jedi:setup)

You can also call this function as a command, to quickly test
what jedi can do." t nil)

(autoload 'jedi:install-server "jedi-core" "\
This command installs Jedi server script jediepcserver.py in a
Python environment dedicated to Emacs.  By default, the
environment is at ``~/.emacs.d/.python-environments/default/``.
This environment is automatically created by ``virtualenv`` if it
does not exist.

Run this command (i.e., type ``M-x jedi:install-server RET``)
whenever Jedi.el shows a message to do so.  It is a good idea to
run this every time after you update Jedi.el to sync version of
Python modules used by Jedi.el and Jedi.el itself.

You can modify the location of the environment by changing
`jedi:environment-root' and/or `python-environment-directory'.  More
specifically, Jedi.el will install Python modules under the directory
``PYTHON-ENVIRONMENT-DIRECTORY/JEDI:ENVIRONMENT-ROOT``.  Note that you
need command line program ``virtualenv``.  If you have the command in
an unusual location, use `python-environment-virtualenv' to specify the
location.

.. NOTE:: jediepcserver.py is installed in a virtual environment but it
   does not mean Jedi.el cannot recognize the modules in virtual
   environment you are using for your Python development.  Jedi
   EPC server recognize the virtualenv it is in (i.e., the
   environment variable ``VIRTUAL_ENV`` in your Emacs) and then
   add modules in that environment to its ``sys.path``.  You can
   also add ``--virtual-env PATH/TO/ENV`` to `jedi:server-args'
   to include modules of virtual environment even you launch
   Emacs outside of the virtual environment.

.. NOTE:: It is highly recommended to use this command to install
   Python modules for Jedi.el.  You still can install Python
   modules used by Jedi.el manually.  However, you are then
   responsible for keeping Jedi.el and Python modules compatible.

See also:

- https://github.com/tkf/emacs-jedi/pull/72
- https://github.com/tkf/emacs-jedi/issues/140#issuecomment-37358527" t nil)

(autoload 'jedi:reinstall-server "jedi-core" "\
Reinstall Jedi server script jediepcserver.py." t nil)

(autoload 'jedi:install-server-block "jedi-core" "\
Blocking version `jedi:install-server'." nil nil)

(register-definition-prefixes "jedi-core" '("jedi"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/auto-complete-20221231.1633/auto-complete-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/auto-complete-20221231.1633/auto-complete-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/auto-complete-20221231.1633/auto-complete-autoloads.el") (car load-path))))



(autoload 'auto-complete "auto-complete" "\
Start auto-completion at current point.

\(fn &optional SOURCES)" t nil)

(autoload 'auto-complete-mode "auto-complete" "\
AutoComplete mode

This is a minor mode.  If called interactively, toggle the
`Auto-Complete mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `auto-complete-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(put 'global-auto-complete-mode 'globalized-minor-mode t)

(defvar global-auto-complete-mode nil "\
Non-nil if Global Auto-Complete mode is enabled.
See the `global-auto-complete-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-auto-complete-mode'.")

(custom-autoload 'global-auto-complete-mode "auto-complete" nil)

(autoload 'global-auto-complete-mode "auto-complete" "\
Toggle Auto-Complete mode in all buffers.
With prefix ARG, enable Global Auto-Complete mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Auto-Complete mode is enabled in all buffers where
`auto-complete-mode-maybe' would do it.

See `auto-complete-mode' for more information on Auto-Complete mode.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "auto-complete" '("ac-" "auto-complete-mode"))



(autoload 'ac-config-default "auto-complete-config" "\
No documentation." nil nil)

(register-definition-prefixes "auto-complete-config" '("ac-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/jedi-20191011.1750/jedi-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/jedi-20191011.1750/jedi-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/jedi-20191011.1750/jedi-autoloads.el") (car load-path))))



(autoload 'jedi:ac-setup "jedi" "\
Add Jedi AC sources to `ac-sources'.

If auto-completion is all you need, you can call this function instead
of `jedi:setup', like this::

   (add-hook 'python-mode-hook 'jedi:ac-setup)

Note that this function calls `auto-complete-mode' if it is not
already enabled, for people who don't call `global-auto-complete-mode'
in their Emacs configuration." t nil)

(autoload 'jedi:complete "jedi" "\
Complete code at point.

\(fn &key (EXPAND ac-expand-on-auto-complete))" t nil)

(autoload 'jedi:auto-complete-mode "jedi" nil nil nil)

(setq jedi:setup-function #'jedi:ac-setup jedi:mode-function #'jedi:auto-complete-mode)

(register-definition-prefixes "jedi" '("jedi:"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/httprepl-20141101.1734/httprepl-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/httprepl-20141101.1734/httprepl-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/httprepl-20141101.1734/httprepl-autoloads.el") (car load-path))))



(autoload 'httprepl "httprepl" "\
Interactively evaluate HTTP requests at a REPL-like
interface. Switches to the buffer specified by
`httprepl-buffer-name', or creates it if it does not exist. See
`httprepl-mode' for a reference on constructing requests." t nil)

(register-definition-prefixes "httprepl" '("httprepl-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/highlight-indentation-20210221.1418/highlight-indentation-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/highlight-indentation-20210221.1418/highlight-indentation-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/highlight-indentation-20210221.1418/highlight-indentation-autoloads.el") (car load-path))))



(autoload 'highlight-indentation-mode "highlight-indentation" "\
Highlight indentation minor mode highlights indentation based on spaces

This is a minor mode.  If called interactively, toggle the
`Highlight-Indentation mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `highlight-indentation-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'highlight-indentation-set-offset "highlight-indentation" "\
Set indentation offset locally in buffer, will prevent
highlight-indentation from trying to guess indentation offset
from major mode

\(fn OFFSET)" t nil)

(autoload 'highlight-indentation-current-column-mode "highlight-indentation" "\
Highlight Indentation minor mode displays a vertical bar
corresponding to the indentation of the current line

This is a minor mode.  If called interactively, toggle the
`Highlight-Indentation-Current-Column mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `highlight-indentation-current-column-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "highlight-indentation" '("highlight-indentation-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/highlight-indent-guides-20200820.2328/highlight-indent-guides-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/highlight-indent-guides-20200820.2328/highlight-indent-guides-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/highlight-indent-guides-20200820.2328/highlight-indent-guides-autoloads.el") (car load-path))))



(autoload 'highlight-indent-guides-auto-set-faces "highlight-indent-guides" "\
Automatically calculate indent guide faces.
If this feature is enabled, calculate reasonable values for the indent guide
colors based on the current theme's colorscheme, and set them appropriately.
This runs whenever a theme is loaded, but it can also be run interactively." t nil)

(autoload 'highlight-indent-guides-mode "highlight-indent-guides" "\
Display indent guides in a buffer.

This is a minor mode.  If called interactively, toggle the
`Highlight-Indent-Guides mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `highlight-indent-guides-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "highlight-indent-guides" '("highlight-indent-guides-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/groovy-mode-20230318.533/groovy-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/groovy-mode-20230318.533/groovy-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/groovy-mode-20230318.533/groovy-mode-autoloads.el") (car load-path))))



(autoload 'groovy-electric-mode "groovy-electric" "\
Toggle Groovy Electric minor mode.
With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

This is a minor mode.  If called interactively, toggle the
`Groovy-Electric mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `groovy-electric-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When Groovy Electric mode is enabled, simple, double and back
quotes as well as braces are paired auto-magically. Expansion
does not occur inside comments and strings. Note that you must
have Font Lock enabled. ${ } is expanded when in a GString

\(fn &optional ARG)" t nil)

(register-definition-prefixes "groovy-electric" '("groovy-electric-"))



(add-to-list 'auto-mode-alist '("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode))

(add-to-list 'auto-mode-alist '("/Jenkinsfile\\'" . groovy-mode))

(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))

(autoload 'groovy-mode "groovy-mode" "\
Major mode for editing Groovy code.

The hook `groovy-mode-hook' is run with no args at mode
initialization.

Key bindings:
\\{groovy-mode-map}

\(fn)" t nil)

(register-definition-prefixes "groovy-mode" '("groovy-"))



(autoload 'inf-groovy-keys "inf-groovy" "\
Set local key defs for inf-groovy in `groovy-mode'." nil nil)

(autoload 'inferior-groovy-mode "inf-groovy" "\
Major mode for interacting with an inferior groovy (groovysh) process.

The following commands are available:
\\{inferior-groovy-mode-map}

A groovy process can be fired up with \\[run-groovy].

Customisation: Entry to this mode runs the hooks on
`comint-mode-hook' and `inferior-groovy-mode-hook' (in that order).

You can send text to the inferior groovy process from other buffers containing
Groovy source.
    `switch-to-groovy' switches the current buffer to the groovy process buffer.
    `groovy-send-definition' sends the current definition to the groovy process.
    `groovy-send-region' sends the current region to the groovy process.

    `groovy-send-definition-and-go', `groovy-send-region-and-go',
        switch to the groovy process buffer after sending their text.
For information on running multiple processes in multiple buffers, see
documentation for variable `groovy-buffer'.

Commands:
Return after the end of the process' output sends the text from the
    end of process to point.
Return before the end of the process' output copies the sexp ending at point
    to the end of the process' output, and sends it.
Delete converts tabs to spaces as it moves back.
Tab indents for groovy; with argument, shifts rest
    of expression rigidly with the current line.
\\<groovy-mode-map>
\\[prog-indent-sexp] does Tab on each line starting within following expression.
Paragraphs are separated only by blank lines.  # start comments.
If you accidentally suspend your process, use \\[comint-continue-subjob]
to continue it." t nil)

(autoload 'run-groovy "inf-groovy" "\
Run an inferior Groovy process, input and output via buffer *groovy*.
If there is a process already running in *groovy*, switch to that buffer.
With a prefix argument, prompt for the groovysh path and arguments
\(see variables `groovysh' and `groovysh-args' for the defaults).

Runs the hook `inferior-groovy-mode-hook' (after the
`comint-mode-hook' is run).  Type \\[describe-mode] in the
process buffer for a list of commands.

\(fn CMD)" t nil)

(eval-after-load 'groovy-mode (lambda nil (add-hook 'groovy-mode-hook 'inf-groovy-keys)))

(register-definition-prefixes "inf-groovy" '("groovy" "inf" "remove-in-string" "switch-to-groovy"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/graphviz-dot-mode-20230325.1050/graphviz-dot-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/graphviz-dot-mode-20230325.1050/graphviz-dot-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/graphviz-dot-mode-20230325.1050/graphviz-dot-mode-autoloads.el") (car load-path))))



(autoload 'graphviz-dot-mode "graphviz-dot-mode" "\
Major mode for the dot language.

Functionallity specific to this mode:

  `indent-for-tab-command'    \\[indent-for-tab-command]
        Indents a single line.
  `graphviz-dot-preview'      \\[graphviz-dot-preview]
        Previews graph in a buffer.
  `graphviz-dot-view'         \\[graphviz-dot-view]
        Views graph in an external viewer.
  `graphviz-dot-indent-line'  \\[graphviz-dot-indent-line]
        Indents current line of code.

Variables specific to this mode:

  `graphviz-dot-dot-program'                   (default `dot')
       Program used to compile the graphs.
  `graphviz-dot-preview-extension'             (default `png')
       File type to use for output.
  `graphviz-dot-view-command'                  (default `dotty %s')
       Command to run when `graphviz-dot-view' is executed.
  `graphviz-dot-view-edit-command'             (default nil)
       If the user should be asked to edit the view command.
  `graphviz-dot-save-before-view'              (default t)
       Automatically save current buffer berore `graphviz-dot-view'.

\(fn)" t nil)

(autoload 'graphviz-dot-preview "graphviz-dot-mode" "\
Compile the graph between BEGIN and END and preview it in an other buffer.
BEGIN (resp. END) is a number defaulting to `point-min' (resp. `point-max')
representing the current buffer's point where the graph definition starts
\(resp. stops).

\(fn &optional BEGIN END)" t nil)

(autoload 'graphviz-turn-on-live-preview "graphviz-dot-mode" "\
Turn on live preview.
This will update the preview on every save." t nil)

(autoload 'graphviz-turn-off-live-preview "graphviz-dot-mode" "\
Turn off live preview.
Saving the file will no longer also update the preview." t nil)

(add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode))

(add-to-list 'auto-mode-alist '("\\.gv\\'" . graphviz-dot-mode))

(register-definition-prefixes "graphviz-dot-mode" '("dot-menu" "graphviz-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/goto-chg-1.7.5/goto-chg-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/goto-chg-1.7.5/goto-chg-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/goto-chg-1.7.5/goto-chg-autoloads.el") (car load-path))))



(autoload 'goto-last-change "goto-chg" "\
Go to the point where the last edit was made in the current buffer.
Repeat the command to go to the second last edit, etc.

To go back to more recent edit, the reverse of this command, use \\[goto-last-change-reverse]
or precede this command with \\[universal-argument] - (minus).

It does not go to the same point twice even if there has been many edits
there. I call the minimal distance between distinguishable edits \"span\".
Set variable `glc-default-span' to control how close is \"the same point\".
Default span is 8.
The span can be changed temporarily with \\[universal-argument] right before \\[goto-last-change]:
\\[universal-argument] <NUMBER> set current span to that number,
\\[universal-argument] (no number) multiplies span by 4, starting with default.
The so set span remains until it is changed again with \\[universal-argument], or the consecutive
repetition of this command is ended by any other command.

When span is zero (i.e. \\[universal-argument] 0) subsequent \\[goto-last-change] visits each and
every point of edit and a message shows what change was made there.
In this case it may go to the same point twice.

This command uses undo information. If undo is disabled, so is this command.
At times, when undo information becomes too large, the oldest information is
discarded. See variable `undo-limit'.

\(fn ARG)" t nil)

(autoload 'goto-last-change-reverse "goto-chg" "\
Go back to more recent changes after \\[goto-last-change] have been used.
See `goto-last-change' for use of prefix argument.

\(fn ARG)" t nil)

(register-definition-prefixes "goto-chg" '("glc-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/gotest-20230221.945/gotest-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/gotest-20230221.945/gotest-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/gotest-20230221.945/gotest-autoloads.el") (car load-path))))



(autoload 'go-test-current-test-cache "gotest" "\
Repeat the previous current test execution." t nil)

(autoload 'go-test-current-test "gotest" "\
Launch go test on the current test.

\(fn &optional LAST)" t nil)

(autoload 'go-test-current-file "gotest" "\
Launch go test on the current buffer file." t nil)

(autoload 'go-test-current-project "gotest" "\
Launch go test on the current project." t nil)

(autoload 'go-test-current-benchmark "gotest" "\
Launch go benchmark on current benchmark." t nil)

(autoload 'go-test-current-file-benchmarks "gotest" "\
Launch go benchmark on current file benchmarks." t nil)

(autoload 'go-test-current-project-benchmarks "gotest" "\
Launch go benchmark on current project." t nil)

(autoload 'go-test-current-coverage "gotest" "\
Launch go test coverage on the current project." t nil)

(autoload 'go-run "gotest" "\
Launch go run on current buffer file.

\(fn &optional ARGS)" t nil)

(register-definition-prefixes "gotest" '("go-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/google-this-20170810.1215/google-this-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/google-this-20170810.1215/google-this-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/google-this-20170810.1215/google-this-autoloads.el") (car load-path))))



(autoload 'google-this-search "google-this" "\
Write and do a google search.
Interactively PREFIX determines quoting.
Non-interactively SEARCH-STRING is the string to search.

\(fn PREFIX &optional SEARCH-STRING)" t nil)

(autoload 'google-this-lucky-and-insert-url "google-this" "\
Fetch the url that would be visited by `google-this-lucky'.

If you just want to do an \"I'm feeling lucky search\", use
`google-this-lucky-search' instead.

Interactively:
* Insert the URL at point,
* Kill the searched term, removing it from the buffer (it is killed, not
  deleted, so it can be easily yanked back if desired).
* Search term defaults to region or line, and always queries for
  confirmation.

Non-Interactively:
* Runs synchronously,
* Search TERM is an argument without confirmation,
* Only insert if INSERT is non-nil, otherwise return.

\(fn TERM &optional INSERT)" t nil)

(autoload 'google-this-lucky-search "google-this" "\
Exactly like `google-this-search', but use the \"I'm feeling lucky\" option.
PREFIX determines quoting.

\(fn PREFIX)" t nil)

(autoload 'google-this-string "google-this" "\
Google given TEXT, but ask the user first if NOCONFIRM is nil.
PREFIX determines quoting.

\(fn PREFIX &optional TEXT NOCONFIRM)" nil nil)

(autoload 'google-this-line "google-this" "\
Google the current line.
PREFIX determines quoting.
NOCONFIRM goes without asking for confirmation.

\(fn PREFIX &optional NOCONFIRM)" t nil)

(autoload 'google-this-ray "google-this" "\
Google text between the point and end of the line.
If there is a selected region, googles the region.
PREFIX determines quoting. Negative arguments invert the line segment.
NOCONFIRM goes without asking for confirmation.
NOREGION ignores the region.

\(fn PREFIX &optional NOCONFIRM NOREGION)" t nil)

(autoload 'google-this-word "google-this" "\
Google the current word.
PREFIX determines quoting.

\(fn PREFIX)" t nil)

(autoload 'google-this-symbol "google-this" "\
Google the current symbol.
PREFIX determines quoting.

\(fn PREFIX)" t nil)

(autoload 'google-this-region "google-this" "\
Google the current region.
PREFIX determines quoting.
NOCONFIRM goes without asking for confirmation.

\(fn PREFIX &optional NOCONFIRM)" t nil)

(autoload 'google-this "google-this" "\
Decide what the user wants to google (always something under point).
Unlike `google-this-search' (which presents an empty prompt with
\"this\" as the default value), this function inserts the query
in the minibuffer to be edited.
PREFIX argument determines quoting.
NOCONFIRM goes without asking for confirmation.

\(fn PREFIX &optional NOCONFIRM)" t nil)

(autoload 'google-this-noconfirm "google-this" "\
Decide what the user wants to google and go without confirmation.
Exactly like `google-this' or `google-this-search', but don't ask
for confirmation.
PREFIX determines quoting.

\(fn PREFIX)" t nil)

(autoload 'google-this-error "google-this" "\
Google the current error in the compilation buffer.
PREFIX determines quoting.

\(fn PREFIX)" t nil)

(autoload 'google-this-clean-error-string "google-this" "\
Parse error string S and turn it into googleable strings.

Removes unhelpful details like file names and line numbers from
simple error strings (such as c-like erros).

Uses replacements in `google-this-error-regexp' and stops at the first match.

\(fn S)" t nil)

(autoload 'google-this-cpp-reference "google-this" "\
Visit the most probable cppreference.com page for this word." t nil)

(autoload 'google-this-forecast "google-this" "\
Search google for \"weather\".
With PREFIX, ask for location.

\(fn PREFIX)" t nil)

(defvar google-this-mode nil "\
Non-nil if Google-This mode is enabled.
See the `google-this-mode' command
for a description of this minor mode.")

(custom-autoload 'google-this-mode "google-this" nil)

(autoload 'google-this-mode "google-this" "\
Toggle Google-This mode on or off.

This is a minor mode.  If called interactively, toggle the
`Google-This mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='google-this-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{google-this-mode-map}

\(fn &optional ARG)" t nil)

(register-definition-prefixes "google-this" '("google-this-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/go-mode-1.6.0/go-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/go-mode-1.6.0/go-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/go-mode-1.6.0/go-mode-autoloads.el") (car load-path))))



(autoload 'go-guru-set-scope "go-guru" "\
Set the scope for the Go guru, prompting the user to edit the previous scope.

The scope restricts analysis to the specified packages.
Its value is a comma-separated list of patterns of these forms:
	golang.org/x/tools/cmd/guru     # a single package
	golang.org/x/tools/...          # all packages beneath dir
	...                             # the entire workspace.

A pattern preceded by '-' is negative, so the scope
	encoding/...,-encoding/xml
matches all encoding packages except encoding/xml." t nil)

(autoload 'go-guru-callees "go-guru" "\
Show possible callees of the function call at the current point." t nil)

(autoload 'go-guru-callers "go-guru" "\
Show the set of callers of the function containing the current point." t nil)

(autoload 'go-guru-callstack "go-guru" "\
Show an arbitrary path from a root of the call graph to the
function containing the current point." t nil)

(autoload 'go-guru-definition "go-guru" "\
Jump to the definition of the selected identifier.

\(fn &optional OTHER-WINDOW)" t nil)

(autoload 'go-guru-definition-other-window "go-guru" "\
Jump to the defintion of the selected identifier in another window" t nil)

(autoload 'go-guru-describe "go-guru" "\
Describe the selected syntax, its kind, type and methods." t nil)

(autoload 'go-guru-pointsto "go-guru" "\
Show what the selected expression points to." t nil)

(autoload 'go-guru-implements "go-guru" "\
Describe the 'implements' relation for types in the package
containing the current point." t nil)

(autoload 'go-guru-freevars "go-guru" "\
Enumerate the free variables of the current selection." t nil)

(autoload 'go-guru-peers "go-guru" "\
Enumerate the set of possible corresponding sends/receives for
this channel receive/send operation." t nil)

(autoload 'go-guru-referrers "go-guru" "\
Enumerate all references to the object denoted by the selected
identifier." t nil)

(autoload 'go-guru-whicherrs "go-guru" "\
Show globals, constants and types to which the selected
expression (of type 'error') may refer." t nil)

(autoload 'go-guru-unhighlight-identifiers "go-guru" "\
Remove highlights from previously highlighted identifier." nil nil)

(autoload 'go-guru-hl-identifier "go-guru" "\
Highlight all instances of the identifier under point. Removes
highlights from previously highlighted identifier." t nil)

(autoload 'go-guru-hl-identifier-mode "go-guru" "\
Highlight instances of the identifier at point after a short
timeout.

This is a minor mode.  If called interactively, toggle the
`Go-Guru-Hl-Identifier mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `go-guru-hl-identifier-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "go-guru" '("go-guru-"))



(autoload 'go-mode "go-mode" "\
Major mode for editing Go source text.

This mode provides (not just) basic editing capabilities for
working with Go code. It offers almost complete syntax
highlighting, indentation that is almost identical to gofmt and
proper parsing of the buffer content to allow features such as
navigation by function, manipulation of comments or detection of
strings.

In addition to these core features, it offers various features to
help with writing Go code. You can directly run buffer content
through gofmt, read godoc documentation from within Emacs, modify
and clean up the list of package imports or interact with the
Playground (uploading and downloading pastes).

The following extra functions are defined:

- `gofmt'
- `godoc' and `godoc-at-point'
- `go-import-add'
- `go-remove-unused-imports'
- `go-goto-arguments'
- `go-goto-docstring'
- `go-goto-function'
- `go-goto-function-name'
- `go-goto-imports'
- `go-goto-return-values'
- `go-goto-method-receiver'
- `go-play-buffer' and `go-play-region'
- `go-download-play'
- `godef-describe' and `godef-jump'
- `go-coverage'
- `go-set-project'
- `go-reset-gopath'

If you want to automatically run `gofmt' before saving a file,
add the following hook to your emacs configuration:

\(add-hook 'before-save-hook #'gofmt-before-save)

If you want to use `godef-jump' instead of etags (or similar),
consider binding godef-jump to `M-.', which is the default key
for `find-tag':

\(add-hook 'go-mode-hook (lambda ()
                          (local-set-key (kbd \"M-.\") #'godef-jump)))

Please note that godef is an external dependency. You can install
it with

go get github.com/rogpeppe/godef


If you're looking for even more integration with Go, namely
on-the-fly syntax checking, auto-completion and snippets, it is
recommended that you look at flycheck
\(see URL `https://github.com/flycheck/flycheck') or flymake in combination
with goflymake (see URL `https://github.com/dougm/goflymake'), gocode
\(see URL `https://github.com/nsf/gocode'), go-eldoc
\(see URL `github.com/syohex/emacs-go-eldoc') and yasnippet-go
\(see URL `https://github.com/dominikh/yasnippet-go')

\(fn)" t nil)

(add-to-list 'auto-mode-alist (cons "\\.go\\'" 'go-mode))

(autoload 'gofmt-before-save "go-mode" "\
Add this to .emacs to run gofmt on the current buffer when saving:
\(add-hook 'before-save-hook 'gofmt-before-save).

Note that this will cause ‘go-mode’ to get loaded the first time
you save any file, kind of defeating the point of autoloading." t nil)

(autoload 'godoc "go-mode" "\
Show Go documentation for QUERY, much like \\<go-mode-map>\\[man].

\(fn QUERY)" t nil)

(autoload 'go-download-play "go-mode" "\
Download a paste from the playground and insert it in a Go buffer.
Tries to look for a URL at point.

\(fn URL)" t nil)

(autoload 'go-dot-mod-mode "go-mode" "\
A major mode for editing go.mod files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("go\\.mod\\'" . go-dot-mod-mode))

(register-definition-prefixes "go-mode" '("go-" "god" "gofmt"))



(autoload 'go-rename "go-rename" "\
Rename the entity denoted by the identifier at point, using
the `gorename' tool. With FORCE, call `gorename' with the
`-force' flag.

\(fn NEW-NAME &optional FORCE)" t nil)

(register-definition-prefixes "go-rename" '("go-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/fuzzy-20221231.1634/fuzzy-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/fuzzy-20221231.1634/fuzzy-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/fuzzy-20221231.1634/fuzzy-autoloads.el") (car load-path))))



(register-definition-prefixes "fuzzy" '("fuzzy-" "turn-o"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/flycheck-20230306.414/flycheck-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/flycheck-20230306.414/flycheck-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/flycheck-20230306.414/flycheck-autoloads.el") (car load-path))))



(autoload 'flycheck-manual "flycheck" "\
Open the Flycheck manual." t nil)

(autoload 'flycheck-mode "flycheck" "\
Flycheck is a minor mode for on-the-fly syntax checking.

In `flycheck-mode' the buffer is automatically syntax-checked
using the first suitable syntax checker from `flycheck-checkers'.
Use `flycheck-select-checker' to select a checker for the current
buffer manually.

If you run into issues, use `\\[flycheck-verify-setup]' to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
`https://www.flycheck.org/en/latest/'.  Please report issues and
request features at URL `https://github.com/flycheck/flycheck'.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

`FlyC'     This buffer has not been checked yet.
`FlyC-'    Flycheck doesn't have a checker for this buffer.
`FlyC*'    Flycheck is running.  Expect results soon!
`FlyC:3|2' This buffer contains three warnings and two errors.
           Use `\\[flycheck-list-errors]' to see the list.

You may also see the following icons:
`FlyC!'    The checker crashed.
`FlyC.'    The last syntax check was manually interrupted.
`FlyC?'    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in `flycheck-mode':

\\{flycheck-mode-map}
\(you can change the prefix by customizing
`flycheck-keymap-prefix')

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-flycheck-mode 'globalized-minor-mode t)

(defvar global-flycheck-mode nil "\
Non-nil if Global Flycheck mode is enabled.
See the `global-flycheck-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-mode'.")

(custom-autoload 'global-flycheck-mode "flycheck" nil)

(autoload 'global-flycheck-mode "flycheck" "\
Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Flycheck mode is enabled in all buffers where `flycheck-mode-on-safe'
would do it.

See `flycheck-mode' for more information on Flycheck mode.

\(fn &optional ARG)" t nil)

(autoload 'flycheck-define-error-level "flycheck" "\
Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

`:severity SEVERITY'
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0; info is -10, warning is 10, and
     error is 100.

     The severity is used by `flycheck-error-level-<' to
     determine the ordering of errors according to their levels.

`:compilation-level LEVEL'

     A number indicating the broad class of messages that errors
     at this level belong to: one of 0 (info), 1 (warning), or
     2 or nil (error).  Defaults to nil.

     This is used by `flycheck-checker-pattern-to-error-regexp'
     to map error levels into `compilation-mode''s hierarchy and
     to get proper highlighting of errors in `compilation-mode'.

`:overlay-category CATEGORY'
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node `(elisp)Overlay Properties' for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the `face' property, for error highlighting.  Another useful
     property for error level categories is `priority', to
     influence the stacking of multiple error level overlays.

`:fringe-bitmap BITMAPS'
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level, or a cons of two bitmaps (one for
     narrow fringes and one for wide fringes).  See Info node
     `(elisp)Fringe Bitmaps' for more information about fringe
     bitmaps, including a list of built-in fringe bitmaps.

`:fringe-face FACE'
     A face symbol denoting the face to use for fringe indicators
     for this level.

`:margin-spec SPEC'
     A display specification indicating what to display in the
     margin when `flycheck-indication-mode' is `left-margin' or
     `right-margin'.  See Info node `(elisp)Displaying in the
     Margins'.  If omitted, Flycheck generates an image spec from
     the fringe bitmap.

`:error-list-face FACE'
     A face symbol denoting the face to use for messages of this
     level in the error list.  See `flycheck-list-errors'.

\(fn LEVEL &rest PROPERTIES)" nil nil)

(function-put 'flycheck-define-error-level 'lisp-indent-function '1)

(autoload 'flycheck-define-command-checker "flycheck" "\
Define SYMBOL as syntax checker to run a command.

Define SYMBOL as generic syntax checker via
`flycheck-define-generic-checker', which uses an external command
to check the buffer.  SYMBOL and DOCSTRING are the same as for
`flycheck-define-generic-checker'.

In addition to the properties understood by
`flycheck-define-generic-checker', the following PROPERTIES
constitute a command syntax checker.  Unless otherwise noted, all
properties are mandatory.  Note that the default `:error-filter'
of command checkers is `flycheck-sanitize-errors'.

`:command COMMAND'
     The command to run for syntax checking.

     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.

     EXECUTABLE is a string with the executable of this syntax
     checker.  It can be overridden with the variable
     `flycheck-SYMBOL-executable'.  Note that this variable is
     NOT implicitly defined by this function.  Use
     `flycheck-def-executable-var' to define this variable.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     `flycheck-substitute-argument', which see.

`:error-patterns PATTERNS'
     A list of patterns to parse the output of the `:command'.

     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where
     LEVEL is a Flycheck error level (see
     `flycheck-define-error-level'), followed by one or more RX
     `SEXP's which parse an error of that level and extract line,
     column, file name and the message.

     See `rx' for general information about RX, and
     `flycheck-rx-to-string' for some special RX forms provided
     by Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

     This property is optional.  If omitted, however, an
     `:error-parser' is mandatory.

`:error-parser FUNCTION'
     A function to parse errors with.

     The function shall accept three arguments OUTPUT CHECKER
     BUFFER.  OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of `flycheck-error' objects parsed from
     OUTPUT.

     This property is optional.  If omitted, it defaults to
     `flycheck-parse-with-patterns'.  In this case,
     `:error-patterns' is mandatory.

`:standard-input t'
     Whether to send the buffer contents on standard input.

     If this property is given and has a non-nil value, send the
     contents of the buffer on standard input.

     Defaults to nil.

Note that you may not give `:start', `:interrupt', and
`:print-doc' for a command checker.  You can give a custom
`:verify' function, though, whose results will be appended to the
default `:verify' function of command checkers.

\(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil nil)

(function-put 'flycheck-define-command-checker 'lisp-indent-function '1)

(function-put 'flycheck-define-command-checker 'doc-string-elt '2)

(autoload 'flycheck-def-config-file-var "flycheck" "\
Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable variable using `defcustom', to
provide configuration files for the given syntax CHECKER.
CUSTOM-ARGS are forwarded to `defcustom'.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.  It can be either a string or a list of
strings.

Use this together with the `config-file' form in the `:command'
argument to `flycheck-define-checker'.

\(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)

(function-put 'flycheck-def-config-file-var 'lisp-indent-function '3)

(autoload 'flycheck-def-option-var "flycheck" "\
Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable using `defcustom', to
provide an option for the given syntax CHECKERS (a checker or a
list of checkers).  INIT-VALUE is the initial value of the
variable, and DOCSTRING is its docstring.  CUSTOM-ARGS are
forwarded to `defcustom'.

Use this together with the `option', `option-list' and
`option-flag' forms in the `:command' argument to
`flycheck-define-checker'.

\(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)

(function-put 'flycheck-def-option-var 'lisp-indent-function '3)

(function-put 'flycheck-def-option-var 'doc-string-elt '4)

(autoload 'flycheck-define-checker "flycheck" "\
Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.

Like `flycheck-define-command-checker', but PROPERTIES must not
be quoted.  Also, implicitly define the executable variable for
SYMBOL with `flycheck-def-executable-var'.

\(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)

(function-put 'flycheck-define-checker 'lisp-indent-function '1)

(function-put 'flycheck-define-checker 'doc-string-elt '2)

(register-definition-prefixes "flycheck" '("flycheck-" "help-flycheck-checker-d" "list-flycheck-errors"))



(register-definition-prefixes "flycheck-buttercup" '("flycheck-buttercup-format-error-list"))



(register-definition-prefixes "flycheck-ert" '("flycheck-er"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/flycheck-color-mode-line-20230106.1829/flycheck-color-mode-line-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/flycheck-color-mode-line-20230106.1829/flycheck-color-mode-line-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/flycheck-color-mode-line-20230106.1829/flycheck-color-mode-line-autoloads.el") (car load-path))))



(autoload 'flycheck-color-mode-line-mode "flycheck-color-mode-line" "\
Minor mode to color the mode line with the Flycheck status.

When called interactively, toggle
`flycheck-color-mode-line-mode'.  With prefix ARG, enable
`flycheck-color-mode-line-mode' if ARG is positive, otherwise
disable it.

When called from Lisp, enable `flycheck-color-mode-line-mode' if ARG is omitted,
nil or positive.  If ARG is `toggle', toggle `flycheck-color-mode-line-mode'.
Otherwise behave as if called interactively.

\(fn &optional ARG)" t nil)

(custom-add-frequent-value 'flycheck-mode-hook 'flycheck-color-mode-line-mode)

(register-definition-prefixes "flycheck-color-mode-line" '("flycheck-color-mode-line-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/dumb-jump-20230716.1717/dumb-jump-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/dumb-jump-20230716.1717/dumb-jump-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/dumb-jump-20230716.1717/dumb-jump-autoloads.el") (car load-path))))



(defvar dumb-jump-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "C-M-g") 'dumb-jump-go) (define-key map (kbd "C-M-p") 'dumb-jump-back) (define-key map (kbd "C-M-q") 'dumb-jump-quick-look) map))

(autoload 'dumb-jump-back "dumb-jump" "\
Jump back to where the last jump was done." t nil)

(autoload 'dumb-jump-quick-look "dumb-jump" "\
Run dumb-jump-go in quick look mode.  That is, show a tooltip of where it would jump instead." t nil)

(autoload 'dumb-jump-go-other-window "dumb-jump" "\
Like 'dumb-jump-go' but use 'find-file-other-window' instead of 'find-file'." t nil)

(autoload 'dumb-jump-go-current-window "dumb-jump" "\
Like dumb-jump-go but always use 'find-file'." t nil)

(autoload 'dumb-jump-go-prefer-external "dumb-jump" "\
Like dumb-jump-go but prefer external matches from the current file." t nil)

(autoload 'dumb-jump-go-prompt "dumb-jump" "\
Like dumb-jump-go but prompts for function instead of using under point" t nil)

(autoload 'dumb-jump-go-prefer-external-other-window "dumb-jump" "\
Like dumb-jump-go-prefer-external but use 'find-file-other-window' instead of 'find-file'." t nil)

(autoload 'dumb-jump-go "dumb-jump" "\
Go to the function/variable declaration for thing at point.
When USE-TOOLTIP is t a tooltip jump preview will show instead.
When PREFER-EXTERNAL is t it will sort external matches before
current file.

\(fn &optional USE-TOOLTIP PREFER-EXTERNAL PROMPT)" t nil)

(defvar dumb-jump-mode nil "\
Non-nil if Dumb-Jump mode is enabled.
See the `dumb-jump-mode' command
for a description of this minor mode.")

(custom-autoload 'dumb-jump-mode "dumb-jump" nil)

(autoload 'dumb-jump-mode "dumb-jump" "\
Minor mode for jumping to variable and function definitions

This is a minor mode.  If called interactively, toggle the
`Dumb-Jump mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dumb-jump-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'dumb-jump-xref-activate "dumb-jump" "\
Function to activate xref backend.
Add this function to `xref-backend-functions' to dumb jump to be
activiated, whenever it finds a project. It is recommended to add
it to the end, so that it only gets activated when no better
option is found." nil nil)

(register-definition-prefixes "dumb-jump" '("dumb-jump-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/dockerfile-mode-20220822.2021/dockerfile-mode-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/dockerfile-mode-20220822.2021/dockerfile-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/dockerfile-mode-20220822.2021/dockerfile-mode-autoloads.el") (car load-path))))



(autoload 'dockerfile-build-buffer "dockerfile-mode" "\
Build an image called IMAGE-NAME based upon the buffer.

If the prefix arg NO-CACHE is set, don't cache the image.

The shell command used to build the image is:

    sudo docker build    \\
      --no-cache         \\
      --force-rm         \\
      --pull             \\
      --tag IMAGE-NAME   \\
      --build-args args  \\
      --progress type    \\
      -f filename        \\
      directory

\(fn IMAGE-NAME &optional NO-CACHE)" t nil)

(autoload 'dockerfile-build-no-cache-buffer "dockerfile-mode" "\
Build an image called IMAGE-NAME based upon the buffer without cache.

\(fn IMAGE-NAME)" t nil)

(autoload 'dockerfile-mode "dockerfile-mode" "\
A major mode to edit Dockerfiles.
\\{dockerfile-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist (cons (concat "[/\\]" "\\(?:Containerfile\\|Dockerfile\\)" "\\(?:\\.[^/\\]*\\)?\\'") 'dockerfile-mode))

(add-to-list 'auto-mode-alist '("\\.dockerfile\\'" . dockerfile-mode))

(register-definition-prefixes "dockerfile-mode" '("dockerfile-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/direnv-20230721.714/direnv-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/direnv-20230721.714/direnv-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/direnv-20230721.714/direnv-autoloads.el") (car load-path))))



(autoload 'direnv-update-environment "direnv" "\
Update the environment for FILE-NAME.

See `direnv-update-directory-environment' for FORCE-SUMMARY.

\(fn &optional FILE-NAME FORCE-SUMMARY)" t nil)

(autoload 'direnv-update-directory-environment "direnv" "\
Update the environment for DIRECTORY.

When FORCE-SUMMARY is non-nil or when called interactively, show
a summary message.

\(fn &optional DIRECTORY FORCE-SUMMARY)" t nil)

(autoload 'direnv-allow "direnv" "\
Run ‘direnv allow’ and update the environment afterwards." t nil)

(defvar direnv-mode nil "\
Non-nil if Direnv mode is enabled.
See the `direnv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `direnv-mode'.")

(custom-autoload 'direnv-mode "direnv" nil)

(autoload 'direnv-mode "direnv" "\
Global minor mode to automatically update the environment using direnv.

This is a minor mode.  If called interactively, toggle the
`Direnv mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='direnv-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When this mode is active, the environment inside Emacs will be
continuously updated to match the direnv environment for the currently
visited (local) file.

\(fn &optional ARG)" t nil)

(autoload 'direnv-envrc-mode "direnv" "\
Major mode for .envrc files as used by direnv.

Since .envrc files are shell scripts, this mode inherits from ‘sh-mode’.
\\{direnv-envrc-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.envrc\\'" . direnv-envrc-mode))

(register-definition-prefixes "direnv" '("direnv-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/backup-each-save-20180227.557/backup-each-save-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/backup-each-save-20180227.557/backup-each-save-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/backup-each-save-20180227.557/backup-each-save-autoloads.el") (car load-path))))



(autoload 'backup-each-save "backup-each-save" nil nil nil)

(register-definition-prefixes "backup-each-save" '("backup-each-save-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/auto-complete-rst-20140225.944/auto-complete-rst-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/auto-complete-rst-20140225.944/auto-complete-rst-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/auto-complete-rst-20140225.944/auto-complete-rst-autoloads.el") (car load-path))))



(register-definition-prefixes "auto-complete-rst" '("ac-source-rst-" "auto-complete-rst-"))




)
(let ((load-true-file-name "/home/chrisstpierre/.emacs.d/elpa/auto-complete-nxml-20140221.458/auto-complete-nxml-autoloads.el")(load-file-name "/home/chrisstpierre/.emacs.d/elpa/auto-complete-nxml-20140221.458/auto-complete-nxml-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/chrisstpierre/.emacs.d/elpa/auto-complete-nxml-20140221.458/auto-complete-nxml-autoloads.el") (car load-path))))



(register-definition-prefixes "auto-complete-nxml" '("ac-source-nxml-" "auto-complete-nxml-"))




)
(setq package-activated-list
      (append
       '(yaml-mode window-jump dash s virtualenvwrapper bind-key use-package compat transient hcl-mode terraform-mode reformatter sqlformat sphinx-doc solarized-theme scss-mode rpm-spec-mode pyvenv f pythonic python-mode deferred python-environment python-black pyenv-mode py-isort popup epl pkg-info magit-section nix-mode markdown-mode legalese know-your-http-well just-mode json-mode concurrent ctable epc jedi-core auto-complete jedi httprepl highlight-indentation highlight-indent-guides groovy-mode graphviz-dot-mode goto-chg gotest google-this go-mode fuzzy flycheck flycheck-color-mode-line dumb-jump dockerfile-mode direnv backup-each-save auto-complete-rst auto-complete-nxml)
       package-activated-list))
(progn
  (require 'info)
  (info-initialize)
  (setq Info-directory-list
        (append
         '("/home/chrisstpierre/.emacs.d/elpa/magit-section-20230731.912" "/home/chrisstpierre/.emacs.d/elpa/transient-20230723.1411" "/home/chrisstpierre/.emacs.d/elpa/compat-29.1.4.2" "/home/chrisstpierre/.emacs.d/elpa/use-package-20230426.2324" "/home/chrisstpierre/.emacs.d/elpa/dash-20230714.723")
         Info-directory-list)))

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; End:

;;; Quickstart file to activate all packages at startup  -*- lexical-binding:t -*-
;; ¡¡ This file is autogenerated by `package-quickstart-refresh', DO NOT EDIT !!

(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/yaml-mode-20241003.153/yaml-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/yaml-mode-20241003.153/yaml-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(let ((loads (get 'yaml 'custom-loads))) (if (member '"yaml-mode" loads) nil (put 'yaml 'custom-loads (cons '"yaml-mode" loads)) (put 'languages 'custom-loads (cons 'yaml (get 'languages 'custom-loads)))))
(autoload 'yaml-mode "yaml-mode" "\
Simple mode to edit YAML.

\\{yaml-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode))
(add-to-list 'magic-mode-alist '("^%YAML\\s-+[0-9]+\\.[0-9]+\\(\\s-+#\\|\\s-*$\\)" . yaml-mode))
(register-definition-prefixes "yaml-mode" '("yaml-"))


(provide 'yaml-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/window-jump-20170809.2208/window-jump-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/window-jump-20170809.2208/window-jump-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'window-jump-left "window-jump" "\
Move to the window to the left of the current window." t)
(autoload 'window-jump-right "window-jump" "\
Move to the window to the right of the current window." t)
(autoload 'window-jump-down "window-jump" "\
Move to the window below the current window." t)
(autoload 'window-jump-up "window-jump" "\
Move to the window above the current window." t)
(register-definition-prefixes "window-jump" '("-wj-inf" "window-jump" "wj-"))


(provide 'window-jump-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/tsc-20220212.1632/tsc-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/tsc-20220212.1632/tsc-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "tsc" '("tsc-"))



(register-definition-prefixes "tsc-dyn-get" '("tsc-"))


(provide 'tsc-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/compat-30.0.0.0/compat-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/compat-30.0.0.0/compat-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "compat" '("compat-"))



(register-definition-prefixes "compat-macs" '("compat-"))


(provide 'compat-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/transient-20241125.1302/transient-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/transient-20241125.1302/transient-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'transient-insert-suffix "transient" "\
Insert a SUFFIX into PREFIX before LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
Remove a conflicting binding unless optional KEEP-OTHER is
  non-nil.
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)")
(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)
(autoload 'transient-append-suffix "transient" "\
Insert a SUFFIX into PREFIX after LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
Remove a conflicting binding unless optional KEEP-OTHER is
  non-nil.
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)")
(function-put 'transient-append-suffix 'lisp-indent-function 'defun)
(autoload 'transient-replace-suffix "transient" "\
Replace the suffix at LOC in PREFIX with SUFFIX.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)")
(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)
(autoload 'transient-remove-suffix "transient" "\
Remove the suffix or group at LOC in PREFIX.
PREFIX is a prefix command, a symbol.
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC)")
(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)
(register-definition-prefixes "transient" '("find-function-advised-original" "transient"))


(provide 'transient-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/hcl-mode-20240220.1534/hcl-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/hcl-mode-20240220.1534/hcl-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'hcl-mode "hcl-mode" "\
Major mode for editing hcl configuration file

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.hcl\\'" . hcl-mode))
(add-to-list 'auto-mode-alist '("\\.nomad\\'" . hcl-mode))
(register-definition-prefixes "hcl-mode" '("hcl-"))


(provide 'hcl-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/dash-20240510.1327/dash-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/dash-20240510.1327/dash-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'dash-fontify-mode "dash" "\
Toggle fontification of Dash special variables.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

This is a minor mode.  If called interactively, toggle the
`Dash-Fontify mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `dash-fontify-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-dash-fontify-mode 'globalized-minor-mode t)
(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")
(custom-autoload 'global-dash-fontify-mode "dash" nil)
(autoload 'global-dash-fontify-mode "dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.

See `dash-fontify-mode' for more information on Dash-Fontify mode.

(fn &optional ARG)" t)
(autoload 'dash-register-info-lookup "dash" "\
Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t)
(register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-"))


(provide 'dash-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/terraform-mode-20240801.921/terraform-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/terraform-mode-20240801.921/terraform-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'terraform-mode "terraform-mode" "\
Major mode for editing terraform configuration file

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.t\\(f\\(vars\\)?\\|ofu\\)\\'" . terraform-mode))
(register-definition-prefixes "terraform-mode" '("terraform-"))


(provide 'terraform-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/reformatter-20240906.1405/reformatter-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/reformatter-20240906.1405/reformatter-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'reformatter-define "reformatter" "\
Define a reformatter command with NAME.

When called, the reformatter will use PROGRAM and any ARGS to
reformat the current buffer.  The contents of the buffer will be
passed as standard input to the reformatter, which should output
them to standard output.  A nonzero exit code will be reported as
failure, and the output of the command to standard error will be
displayed to the user.

The macro accepts the following keyword arguments:

PROGRAM (required)

  Provides a form which should evaluate to a string at runtime,
  e.g. a literal string, or the name of a variable which holds
  the program path.

ARGS

  Command-line arguments for the program.  If provided, this is a
  form which evaluates to a list of strings at runtime.  Default
  is the empty list.  This form is evaluated at runtime so that
  you can use buffer-local variables to influence the args passed
  to the reformatter program: the variable `input-file' will be
  lexically bound to the path of a file containing the text to be
  reformatted: see the keyword options INPUT-FILE, STDIN and
  STDOUT for more information.

STDIN

  When non-nil (the default), the program is passed the input
  data on stdin.  Set this to nil when your reformatter can only
  operate on files in place.  In such a case, your ARGS should
  include a reference to the `input-file' variable, which will be
  bound to an input path when evaluated.

STDOUT

  When non-nil (the default), the program is expected to write
  the reformatted text to stdout.  Set this to nil if your
  reformatter can only operate on files in place, in which case
  the contents of the temporary input file will be used as the
  replacement text.

INPUT-FILE

  Sometimes your reformatter program might expect files to be in
  a certain directory or have a certain file extension.  This option
  lets you handle that.

  If provided, it is a form which will be evaluated before each
  run of the formatter, and is expected to return a temporary
  file path suitable for holding the region to be reformatted.
  It must not produce the same path as the current buffer's file
  if that is set: you shouldn't be operating directly on the
  buffer's backing file.  The temporary input file will be
  deleted automatically.  You might find the functions
  `reformatter-temp-file-in-current-directory' and
  `reformatter-temp-file' helpful.

MODE

  Unless nil, also generate a minor mode that will call the
  reformatter command from `before-save-hook' when enabled.
  Default is t.

GROUP

  If provided, this is the custom group used for any generated
  modes or custom variables.  Don't forget to declare this group
  using a `defgroup' form.

LIGHTER

  If provided, this is a mode lighter string which will be used
  for the \"-on-save\" minor mode.  It should have a leading
  space.  The supplied value will be used as the default for a
  generated custom variable which specifies the mode lighter.
  Default is nil, ie. no lighter.

KEYMAP

  If provided, this is the symbol name of the \"-on-save\" mode's
  keymap, which you must declare yourself.  Default is no keymap.

EXIT-CODE-SUCCESS-P

  If provided, this is a function object callable with `funcall'
  which accepts an integer process exit code, and returns non-nil
  if that exit code is considered successful.  This could be a
  lambda, quoted symbol or sharp-quoted symbol.  If not supplied,
  the code is considered successful if it is `zerop'.

WORKING-DIRECTORY

  Directory where your reformatter program is started. If provided, this
  should be a form that evaluates to a string at runtime. Default is the
  value of `default-directory' in the buffer.

(fn NAME &key PROGRAM ARGS (MODE t) (STDIN t) (STDOUT t) INPUT-FILE LIGHTER KEYMAP GROUP (EXIT-CODE-SUCCESS-P \\='zerop) WORKING-DIRECTORY)" nil t)
(function-put 'reformatter-define 'lisp-indent-function 'defun)
(register-definition-prefixes "reformatter" '("reformatter-"))


(provide 'reformatter-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/sqlformat-20240325.1006/sqlformat-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/sqlformat-20240325.1006/sqlformat-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'sqlformat-buffer "sqlformat" nil t)
 (autoload 'sqlformat-region "sqlformat" nil t)
 (autoload 'sqlformat-on-save-mode "sqlformat" nil t)
(autoload 'sqlformat "sqlformat" "\
Reformat SQL in region from BEG to END using `sqlformat-region'.
If no region is active, the current statement (paragraph) is reformatted.
Install the \"sqlparse\" (Python) package to get \"sqlformat\", or
\"pgformatter\" to get \"pg_format\", or install the \"sqlfluff\" (Python) 
package to get \"sqlfluff\".

(fn BEG END)" t)
(register-definition-prefixes "sqlformat" '("sqlformat-"))


(provide 'sqlformat-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/spinner-1.7.4/spinner-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/spinner-1.7.4/spinner-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'spinner-create "spinner" "\
Create a spinner of the given TYPE.
The possible TYPEs are described in `spinner--type-to-frames'.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

If BUFFER-LOCAL is non-nil, the spinner will be automatically
deactivated if the buffer is killed.  If BUFFER-LOCAL is a
buffer, use that instead of current buffer.

When started, in order to function properly, the spinner runs a
timer which periodically calls `force-mode-line-update' in the
current buffer.  If BUFFER-LOCAL was set at creation time, then
`force-mode-line-update' is called in that buffer instead.  When
the spinner is stopped, the timer is deactivated.

DELAY, if given, is the number of seconds to wait after starting
the spinner before actually displaying it. It is safe to cancel
the spinner before this time, in which case it won't display at
all.

(fn &optional TYPE BUFFER-LOCAL FPS DELAY)")
(autoload 'spinner-start "spinner" "\
Start a mode-line spinner of given TYPE-OR-OBJECT.
If TYPE-OR-OBJECT is an object created with `make-spinner',
simply activate it.  This method is designed for minor modes, so
they can use the spinner as part of their lighter by doing:
    '(:eval (spinner-print THE-SPINNER))
To stop this spinner, call `spinner-stop' on it.

If TYPE-OR-OBJECT is anything else, a buffer-local spinner is
created with this type, and it is displayed in the
`mode-line-process' of the buffer it was created it.  Both
TYPE-OR-OBJECT and FPS are passed to `make-spinner' (which see).
To stop this spinner, call `spinner-stop' in the same buffer.

Either way, the return value is a function which can be called
anywhere to stop this spinner.  You can also call `spinner-stop'
in the same buffer where the spinner was created.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

DELAY, if given, is the number of seconds to wait until actually
displaying the spinner. It is safe to cancel the spinner before
this time, in which case it won't display at all.

(fn &optional TYPE-OR-OBJECT FPS DELAY)")
(register-definition-prefixes "spinner" '("spinner-"))


(provide 'spinner-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/s-20220902.1511/s-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/s-20220902.1511/s-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "s" '("s-"))


(provide 's-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/sphinx-doc-20210213.1250/sphinx-doc-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/sphinx-doc-20210213.1250/sphinx-doc-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'sphinx-doc-mode "sphinx-doc" "\
Sphinx friendly docstring generation for Python code.

This is a minor mode.  If called interactively, toggle the
`Sphinx-Doc mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sphinx-doc-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "sphinx-doc" '("sphinx-doc"))


(provide 'sphinx-doc-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/solarized-theme-20240725.1617/solarized-theme-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/solarized-theme-20240725.1617/solarized-theme-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'solarized-color-blend "solarized" "\
Blends COLOR1 onto COLOR2 with ALPHA.

COLOR1 and COLOR2 should be color names (e.g. \"white\") or RGB
triplet strings (e.g. \"#ff12ec\").

Alpha should be a float between 0 and 1.

Optional argument DIGITS-PER-COMPONENT can be either 4 (the default) or 2;
use the latter if you need a 24-bit specification of a color.

(fn COLOR1 COLOR2 ALPHA &optional DIGITS-PER-COMPONENT)")
(autoload 'solarized-create-color-palette "solarized" "\
Create color-palette from CORE-PALETTE.

The Returned color-palette has the same format as `solarized-color-palette'

(fn CORE-PALETTE)")
(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))
(register-definition-prefixes "solarized" '("solarized-"))



(register-definition-prefixes "solarized-dark-high-contrast-theme" '("solarized-dark-high-contrast"))



(register-definition-prefixes "solarized-dark-theme" '("solarized-dark"))



(register-definition-prefixes "solarized-faces" '("solarized-definition"))



(register-definition-prefixes "solarized-gruvbox-dark-theme" '("solarized-gruvbox-dark"))



(register-definition-prefixes "solarized-gruvbox-light-theme" '("solarized-gruvbox-light"))



(register-definition-prefixes "solarized-light-high-contrast-theme" '("solarized-light-high-contrast"))



(register-definition-prefixes "solarized-light-theme" '("solarized-light"))



(register-definition-prefixes "solarized-palettes" '("solarized-"))



(register-definition-prefixes "solarized-selenized-black-theme" '("solarized-selenized-black"))



(register-definition-prefixes "solarized-selenized-dark-theme" '("solarized-selenized-dark"))



(register-definition-prefixes "solarized-selenized-light-theme" '("solarized-selenized-light"))



(register-definition-prefixes "solarized-selenized-white-theme" '("solarized-selenized-white"))



(register-definition-prefixes "solarized-theme-utils" '("solarized-import-faces"))



(register-definition-prefixes "solarized-wombat-dark-theme" '("solarized-wombat-dark"))



(register-definition-prefixes "solarized-zenburn-theme" '("solarized-zenburn"))


(provide 'solarized-theme-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/scss-mode-20180123.1708/scss-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/scss-mode-20180123.1708/scss-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'scss-mode "scss-mode" "\
Major mode for editing SCSS files, http://sass-lang.com/
Special commands:
\\{scss-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
(register-definition-prefixes "scss-mode" '("flymake-scss-init" "scss-"))


(provide 'scss-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/rpm-spec-mode-20160710.1136/rpm-spec-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/rpm-spec-mode-20160710.1136/rpm-spec-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'rpm-spec-mode "rpm-spec-mode" "\
Major mode for editing RPM spec files.
This is much like C mode except for the syntax of comments.  It uses
the same keymap as C mode and has the same variables for customizing
indentation.  It has its own abbrev table and its own syntax table.

Turning on RPM spec mode calls the value of the variable `rpm-spec-mode-hook'
with no args, if that value is non-nil." t)
(add-to-list 'auto-mode-alist '("\\.spec\\(\\.in\\)?$" . rpm-spec-mode))
(autoload 'rpmbuild-mode "rpm-spec-mode" "\


(fn)")
(register-definition-prefixes "rpm-spec-mode" '("rpm-"))


(provide 'rpm-spec-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/pyvenv-20211014.707/pyvenv-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/pyvenv-20211014.707/pyvenv-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'pyvenv-activate "pyvenv" "\
Activate the virtual environment in DIRECTORY.

(fn DIRECTORY)" t)
(autoload 'pyvenv-deactivate "pyvenv" "\
Deactivate any current virtual environment." t)
(autoload 'pyvenv-workon "pyvenv" "\
Activate a virtual environment from $WORKON_HOME.

If the virtual environment NAME is already active, this function
does not try to reactivate the environment.

(fn NAME)" t)
(defvar pyvenv-mode nil "\
Non-nil if Pyvenv mode is enabled.
See the `pyvenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-mode'.")
(custom-autoload 'pyvenv-mode "pyvenv" nil)
(autoload 'pyvenv-mode "pyvenv" "\
Global minor mode for pyvenv.

Will show the current virtualenv in the mode line, and respect a
`pyvenv-workon' setting in files.

This is a global minor mode.  If called interactively, toggle the
`Pyvenv mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyvenv-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(defvar pyvenv-tracking-mode nil "\
Non-nil if Pyvenv-Tracking mode is enabled.
See the `pyvenv-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-tracking-mode'.")
(custom-autoload 'pyvenv-tracking-mode "pyvenv" nil)
(autoload 'pyvenv-tracking-mode "pyvenv" "\
Global minor mode to track the current virtualenv.

When this mode is active, pyvenv will activate a buffer-specific
virtualenv whenever the user switches to a buffer with a
buffer-local `pyvenv-workon' or `pyvenv-activate' variable.

This is a global minor mode.  If called interactively, toggle the
`Pyvenv-Tracking mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyvenv-tracking-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pyvenv-restart-python "pyvenv" "\
Restart Python inferior processes." t)
(register-definition-prefixes "pyvenv" '("pyvenv-"))


(provide 'pyvenv-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/f-20241003.1131/f-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/f-20241003.1131/f-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "f" '("f-"))


(provide 'f-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/pythonic-20230821.1733/pythonic-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/pythonic-20230821.1733/pythonic-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'pythonic-activate "pythonic" "\
Activate python VIRTUALENV.

(fn VIRTUALENV)" t)
(autoload 'pythonic-deactivate "pythonic" "\
Deactivate python virtual environment." t)
(register-definition-prefixes "pythonic" '("pythonic-"))


(provide 'pythonic-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/python-mode-20240911.1346/python-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/python-mode-20240911.1346/python-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "python-mode" '("all-mode-setting" "autopair-mode" "flake8" "force-py-shell-name-p-o" "highlight-indent-active" "hs-hide-comments-when-hiding-all" "info-lookup-mode" "ipython" "iypthon" "jython" "pdb-track-stack-from-shell-p" "pep8" "pst-here" "strip-chars-" "toggle-force-py-shell-name-p" "turn-o" "virtualenv-"))


(provide 'python-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/deferred-20170901.1330/deferred-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/deferred-20170901.1330/deferred-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "deferred" '("deferred:"))


(provide 'deferred-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/python-environment-20150310.853/python-environment-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/python-environment-20150310.853/python-environment-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "python-environment" '("python-environment-"))



(register-definition-prefixes "test-python-environment" '("pye-"))


(provide 'python-environment-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/python-black-20240520.729/python-black-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/python-black-20240520.729/python-black-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'python-black-buffer "python-black" nil t)
 (autoload 'python-black-region "python-black" nil t)
 (autoload 'python-black-on-save-mode "python-black" nil t)
(autoload 'python-black-on-save-mode-enable-dwim "python-black" "\
Enable ‘python-black-on-save-mode’ if appropriate." t)
(autoload 'python-black-statement "python-black" "\
Reformats the current statement.

When called interactively with a prefix argument, or when
DISPLAY-ERRORS is non-nil, shows a buffer if the formatting fails.

(fn &optional DISPLAY-ERRORS)" t)
(autoload 'python-black-partial-dwim "python-black" "\
Reformats the active region or the current statement.

This runs ‘python-black-region’ or ‘python-black-statement’ depending
on whether the region is currently active.

When called interactively with a prefix argument, or when
DISPLAY-ERRORS is non-nil, shows a buffer if the formatting fails.

(fn &optional DISPLAY-ERRORS)" t)
(autoload 'python-black-org-mode-block "python-black" "\
Reformats the current `org-mode' source block.
When called interactively, or with prefix argument
DISPLAY-ERRORS, shows a buffer if the formatting fails.

(fn &optional DISPLAY-ERRORS)" t)
(register-definition-prefixes "python-black" '("python-black-"))


(provide 'python-black-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/pyenv-mode-20230821.1645/pyenv-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/pyenv-mode-20230821.1645/pyenv-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'pyenv-mode-set "pyenv-mode" "\
Set python shell VERSION.

(fn VERSION)" t)
(autoload 'pyenv-mode-unset "pyenv-mode" "\
Unset python shell version." t)
(defvar pyenv-mode nil "\
Non-nil if Pyenv mode is enabled.
See the `pyenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyenv-mode'.")
(custom-autoload 'pyenv-mode "pyenv-mode" nil)
(autoload 'pyenv-mode "pyenv-mode" "\
Minor mode for pyenv interaction.

\\{pyenv-mode-map}

This is a global minor mode.  If called interactively, toggle the
`Pyenv mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyenv-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pyenv-mode" '("pyenv-mode-"))


(provide 'pyenv-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/py-isort-20160925.1018/py-isort-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/py-isort-20160925.1018/py-isort-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'py-isort-region "py-isort" "\
Uses the \"isort\" tool to reformat the current region." t)
(autoload 'py-isort-buffer "py-isort" "\
Uses the \"isort\" tool to reformat the current buffer." t)
(autoload 'py-isort-before-save "py-isort" nil t)
(register-definition-prefixes "py-isort" '("py-isort-"))


(provide 'py-isort-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/popup-20240101.830/popup-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/popup-20240101.830/popup-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "popup" '("popup-"))


(provide 'popup-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/poetry-20240329.1103/poetry-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/poetry-20240329.1103/poetry-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'poetry "poetry" nil t)
(autoload 'poetry-add-dep "poetry" "\
Add PACKAGE as a new dependency to the project.

PACKAGE can be a list of packages, separated by spaces.

(fn PACKAGE)" t)
(autoload 'poetry-add-dev-dep "poetry" "\
Add PACKAGE as a new development dependency to the project.

PACKAGE can be a list of packages, separated by spaces.

(fn PACKAGE)" t)
(autoload 'poetry-add-opt-dep "poetry" "\
Add PACKAGE as a new optional dependency to the project.

PACKAGE can be a list of packages, separated by spaces.

(fn PACKAGE)" t)
(autoload 'poetry-remove "poetry" "\
Remove PACKAGE from the project dependencies.

TYPE is the type of dependency (dep, dev or opt).

(fn PACKAGE TYPE)" t)
(autoload 'poetry-check "poetry" "\
Check the validity of the pyproject.toml file." t)
(autoload 'poetry-install-install "poetry" "\
Install the project dependencies." t)
(autoload 'poetry-lock "poetry" "\
Locks the project dependencies." t)
(autoload 'poetry-update "poetry" "\
Update dependencies as according to the pyproject.toml file." t)
(autoload 'poetry-show "poetry" "\
Show information about package PACKAGE.

(fn PACKAGE)" t)
(autoload 'poetry-build "poetry" "\
Build a package, as a tarball and a wheel by default." t)
(autoload 'poetry-publish "poetry" "\
Publish the package to a remote repository.

REPO is the repository and USERNAME and PASSWORD the
credential to use.

(fn REPO USERNAME PASSWORD)" t)
(autoload 'poetry-new "poetry" "\
Create a new Python project at PATH.

(fn PATH)" t)
(autoload 'poetry-init "poetry" "\
Initialize a Poetry project in PATH.

(fn &optional PATH)" t)
(autoload 'poetry-edit-pyproject-toml "poetry" "\
Open the current project 'pyproject.toml' file for edition." t)
(autoload 'poetry-run "poetry" "\
Run COMMAND in the appropriate environment.

(fn COMMAND)" t)
(autoload 'poetry-shell "poetry" "\
Spawn a shell within the virtual environment." t)
(autoload 'poetry-self-update "poetry" "\
Update poetry to the latest version." t)
(autoload 'poetry-venv-workon "poetry" "\
Activate the virtualenv associated to the current poetry project." t)
(autoload 'poetry-venv-deactivate "poetry" "\
De-activate the virtualenv associated to the current poetry project." t)
(autoload 'poetry-venv-toggle "poetry" "\
Toggle the virtualenv associated to the current poetry project." t)
(defvar poetry-tracking-mode nil "\
Non-nil if Poetry-Tracking mode is enabled.
See the `poetry-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `poetry-tracking-mode'.")
(custom-autoload 'poetry-tracking-mode "poetry" nil)
(autoload 'poetry-tracking-mode "poetry" "\
Global minor mode to track the current poetry virtualenv.

For every project, Poetry automatically creates a virtualenv and install the project dependencies in it.
This minor mode automatically activates the relevant Poetry virtualenv when visiting a project file.

It ensures that your python scripts are always executed in the right environment.

This is a global minor mode.  If called interactively, toggle the
`Poetry-Tracking mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='poetry-tracking-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'poetry-find-project-root "poetry" "\
Return the poetry project root if any.")
(register-definition-prefixes "poetry" '("poetry-"))


(provide 'poetry-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/markdown-mode-20240829.324/markdown-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/markdown-mode-20240829.324/markdown-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'markdown-mode "markdown-mode" "\
Major mode for editing Markdown files.

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))
(autoload 'gfm-mode "markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

(fn)" t)
(autoload 'markdown-view-mode "markdown-mode" "\
Major mode for viewing Markdown content.

(fn)" t)
(autoload 'gfm-view-mode "markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

(fn)" t)
(autoload 'markdown-live-preview-mode "markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

This is a minor mode.  If called interactively, toggle the
`Markdown-Live-Preview mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `markdown-live-preview-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown"))


(provide 'markdown-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/lv-20200507.1518/lv-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/lv-20200507.1518/lv-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "lv" '("lv-"))


(provide 'lv-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/ht-20230703.558/ht-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/ht-20230703.558/ht-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "ht" 'nil)


(provide 'ht-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/lsp-mode-20241202.334/lsp-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/lsp-mode-20241202.334/lsp-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "lsp-actionscript" '("lsp-actionscript-"))



(put 'lsp-ada-project-file 'safe-local-variable 'stringp)
(register-definition-prefixes "lsp-ada" '("lsp-ada-"))



(register-definition-prefixes "lsp-angular" '("lsp-client"))



(register-definition-prefixes "lsp-ansible" '("lsp-ansible-"))



(register-definition-prefixes "lsp-asm" '("lsp-asm-"))



(register-definition-prefixes "lsp-astro" '("lsp-astro--get-initialization-options"))



(register-definition-prefixes "lsp-autotools" '("lsp-autotools-"))



(register-definition-prefixes "lsp-awk" '("lsp-awk-executable"))



(register-definition-prefixes "lsp-bash" '("lsp-bash-"))



(register-definition-prefixes "lsp-beancount" '("lsp-beancount-"))



(register-definition-prefixes "lsp-bufls" '("lsp-buf"))



(register-definition-prefixes "lsp-camel" '("lsp-camel-"))



(autoload 'lsp-cpp-flycheck-clang-tidy-error-explainer "lsp-clangd" "\
Explain a clang-tidy ERROR by scraping documentation from llvm.org.

(fn ERROR)")
(register-definition-prefixes "lsp-clangd" '("lsp-c"))



(autoload 'lsp-clojure-show-test-tree "lsp-clojure" "\
Show a test tree and focus on it if IGNORE-FOCUS? is nil.

(fn IGNORE-FOCUS?)" t)
(autoload 'lsp-clojure-show-project-tree "lsp-clojure" "\
Show a project tree with source-paths and dependencies.
Focus on it if IGNORE-FOCUS? is nil.

(fn IGNORE-FOCUS?)" t)
(register-definition-prefixes "lsp-clojure" '("lsp-clojure-"))



(register-definition-prefixes "lsp-cmake" '("lsp-cmake-"))



(add-hook 'cobol-mode-hook #'lsp-cobol-start-ls)
(autoload 'lsp-cobol-start-ls "lsp-cobol" "\
Start the COBOL language service." t)
(register-definition-prefixes "lsp-cobol" '("lsp-cobol-"))



(define-obsolete-variable-alias 'lsp-prefer-capf 'lsp-completion-provider "\
lsp-mode 7.0.1")
(define-obsolete-variable-alias 'lsp-enable-completion-at-point 'lsp-completion-enable "\
lsp-mode 7.0.1")
(defvar lsp-completion-enable t "\
Enable `completion-at-point' integration.")
(custom-autoload 'lsp-completion-enable "lsp-completion" t)
(autoload 'lsp-completion-at-point "lsp-completion" "\
Get lsp completions.")
(autoload 'lsp-completion--enable "lsp-completion" "\
Enable LSP completion support.")
(autoload 'lsp-completion-mode "lsp-completion" "\
Toggle LSP completion support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Completion mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-completion-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-auto-configure lsp-completion-enable) (lsp-completion--enable))))
(register-definition-prefixes "lsp-completion" '("lsp-"))



(register-definition-prefixes "lsp-credo" '("lsp-credo-"))



(register-definition-prefixes "lsp-crystal" '("lsp-clients-crystal-executable"))



(register-definition-prefixes "lsp-csharp" '("lsp-csharp-"))



(register-definition-prefixes "lsp-css" '("lsp-css-"))



(register-definition-prefixes "lsp-cucumber" '("lsp-cucumber-"))



(register-definition-prefixes "lsp-cypher" '("lsp-client--cypher-ls-server-command"))



(define-obsolete-variable-alias 'lsp-diagnostic-package 'lsp-diagnostics-provider "\
lsp-mode 7.0.1")
(define-obsolete-variable-alias 'lsp-flycheck-default-level 'lsp-diagnostics-flycheck-default-level "\
lsp-mode 7.0.1")
(autoload 'lsp-diagnostics-lsp-checker-if-needed "lsp-diagnostics")
(autoload 'lsp-diagnostics--enable "lsp-diagnostics" "\
Enable LSP checker support.")
(autoload 'lsp-diagnostics-mode "lsp-diagnostics" "\
Toggle LSP diagnostics integration.

This is a minor mode.  If called interactively, toggle the
`Lsp-Diagnostics mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when lsp-auto-configure (lsp-diagnostics--enable))))
(register-definition-prefixes "lsp-diagnostics" '("lsp-diagnostics-"))



(defvar lsp-dired-mode nil "\
Non-nil if Lsp-Dired mode is enabled.
See the `lsp-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-dired-mode'.")
(custom-autoload 'lsp-dired-mode "lsp-dired" nil)
(autoload 'lsp-dired-mode "lsp-dired" "\
Display `lsp-mode' icons for each file in a dired buffer.

This is a global minor mode.  If called interactively, toggle the
`Lsp-Dired mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='lsp-dired-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-dired" '("lsp-dired-"))



(register-definition-prefixes "lsp-dockerfile" '("lsp-dockerfile-language-server-command"))



(register-definition-prefixes "lsp-dot" '("lsp-dot--dot-ls-server-command"))



(register-definition-prefixes "lsp-earthly" '("lsp-earthly-"))



(register-definition-prefixes "lsp-elixir" '("lsp-elixir-"))



(register-definition-prefixes "lsp-elm" '("lsp-"))



(register-definition-prefixes "lsp-emmet" '("lsp-emmet-ls-command"))



(register-definition-prefixes "lsp-erlang" '("lsp-erlang-"))



(register-definition-prefixes "lsp-eslint" '("lsp-"))



(register-definition-prefixes "lsp-fennel" '("lsp-fennel--ls-command"))



(register-definition-prefixes "lsp-fortran" '("lsp-clients-"))



(autoload 'lsp-fsharp--workspace-load "lsp-fsharp" "\
Load all of the provided PROJECTS.

(fn PROJECTS)")
(register-definition-prefixes "lsp-fsharp" '("lsp-fsharp-"))



(register-definition-prefixes "lsp-gdscript" '("lsp-gdscript-"))



(register-definition-prefixes "lsp-gleam" '("lsp-gleam-executable"))



(register-definition-prefixes "lsp-glsl" '("lsp-glsl-executable"))



(register-definition-prefixes "lsp-go" '("lsp-go-"))



(register-definition-prefixes "lsp-golangci-lint" '("lsp-golangci-lint-"))



(register-definition-prefixes "lsp-graphql" '("lsp-"))



(register-definition-prefixes "lsp-groovy" '("lsp-groovy-"))



(register-definition-prefixes "lsp-hack" '("lsp-clients-hack-command"))



(register-definition-prefixes "lsp-haxe" '("lsp-"))



(autoload 'lsp-headerline-breadcrumb-mode "lsp-headerline" "\
Toggle breadcrumb on headerline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Headerline-Breadcrumb mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-headerline-breadcrumb-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'lsp-breadcrumb-go-to-symbol "lsp-headerline" "\
Go to the symbol on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t)
(autoload 'lsp-breadcrumb-narrow-to-symbol "lsp-headerline" "\
Narrow to the symbol range on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t)
(register-definition-prefixes "lsp-headerline" '("lsp-headerline-"))



(register-definition-prefixes "lsp-html" '("lsp-html-"))



(register-definition-prefixes "lsp-hy" '("lsp-clients-hy-server-executable"))



(register-definition-prefixes "lsp-icons" '("lsp-"))



(autoload 'lsp-ido-workspace-symbol "lsp-ido" "\
`ido' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t)
(register-definition-prefixes "lsp-ido" '("lsp-ido-"))



(register-definition-prefixes "lsp-idris" '("lsp-idris2-lsp-"))



(autoload 'lsp-iedit-highlights "lsp-iedit" "\
Start an `iedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t)
(autoload 'lsp-iedit-linked-ranges "lsp-iedit" "\
Start an `iedit' for `textDocument/linkedEditingRange'" t)
(autoload 'lsp-evil-multiedit-highlights "lsp-iedit" "\
Start an `evil-multiedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t)
(autoload 'lsp-evil-multiedit-linked-ranges "lsp-iedit" "\
Start an `evil-multiedit' for `textDocument/linkedEditingRange'" t)
(autoload 'lsp-evil-state-highlights "lsp-iedit" "\
Start `iedit-mode'. for `textDocument/documentHighlight'" t)
(autoload 'lsp-evil-state-linked-ranges "lsp-iedit" "\
Start `iedit-mode'. for `textDocument/linkedEditingRange'" t)
(register-definition-prefixes "lsp-iedit" '("lsp-iedit--on-ranges"))



(autoload 'lsp-inline-completion-display "lsp-inline-completion" "\
Displays the inline completions overlay

(fn &optional IMPLICIT)" t)
(defvar lsp-inline-completion-enable t "\
If non-nil it will enable inline completions on idle.")
(custom-autoload 'lsp-inline-completion-enable "lsp-inline-completion" t)
(autoload 'lsp-inline-completion-mode "lsp-inline-completion" "\
Mode automatically displaying inline completions.

This is a minor mode.  If called interactively, toggle the
`Lsp-Inline-Completion mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-inline-completion-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-inline-completion-enable (lsp-feature? "textDocument/inlineCompletion")) (lsp-inline-completion-mode))))
(autoload 'lsp-inline-completion-company-integration-mode "lsp-inline-completion" "\
Minor mode to be used when company mode is active with lsp-inline-completion-mode

This is a minor mode.  If called interactively, toggle the
`Lsp-Inline-Completion-Company-Integration mode' mode.  If the
prefix argument is positive, enable the mode, and if it is zero
or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-inline-completion-company-integration-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-inline-completion" '("lsp-"))



(register-definition-prefixes "lsp-javascript" '("lsp-"))



(register-definition-prefixes "lsp-jq" '("lsp-clients-jq-server-executable"))



(register-definition-prefixes "lsp-json" '("lsp-"))



(register-definition-prefixes "lsp-jsonnet" '("lsp-clients-jsonnet-server-executable"))



(register-definition-prefixes "lsp-kotlin" '("lsp-"))



(autoload 'lsp-lens--enable "lsp-lens" "\
Enable lens mode.")
(autoload 'lsp-lens-show "lsp-lens" "\
Display lenses in the buffer." t)
(autoload 'lsp-lens-hide "lsp-lens" "\
Delete all lenses." t)
(autoload 'lsp-lens-mode "lsp-lens" "\
Toggle code-lens overlays.

This is a minor mode.  If called interactively, toggle the
`Lsp-Lens mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-lens-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'lsp-avy-lens "lsp-lens" "\
Click lsp lens using `avy' package." t)
(register-definition-prefixes "lsp-lens" '("lsp-"))



(autoload 'lsp-lisp-alive-start-ls "lsp-lisp" "\
Start the alive-lsp." t)
(register-definition-prefixes "lsp-lisp" '("lsp-lisp-a"))



(register-definition-prefixes "lsp-lua" '("lsp-"))



(register-definition-prefixes "lsp-magik" '("lsp-magik-"))



(register-definition-prefixes "lsp-markdown" '("lsp-markdown-"))



(register-definition-prefixes "lsp-marksman" '("lsp-marksman-"))



(register-definition-prefixes "lsp-mdx" '("lsp-mdx-server-command"))



(register-definition-prefixes "lsp-meson" '("lsp-meson-"))



(register-definition-prefixes "lsp-mint" '("lsp-clients-mint-executable"))



(put 'lsp-enable-file-watchers 'safe-local-variable #'booleanp)
(put 'lsp-file-watch-ignored-directories 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-ignored-files 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-threshold 'safe-local-variable (lambda (i) (or (numberp i) (not i))))
(autoload 'lsp--string-listp "lsp-mode" "\
Return t if all elements of SEQUENCE are strings, else nil.

(fn SEQUENCE)")
(autoload 'lsp-load-vscode-workspace "lsp-mode" "\
Load vscode workspace from FILE

(fn FILE)" t)
(autoload 'lsp-save-vscode-workspace "lsp-mode" "\
Save vscode workspace to FILE

(fn FILE)" t)
(autoload 'lsp-install-server "lsp-mode" "\
Interactively install or re-install server.
When prefix UPDATE? is t force installation even if the server is present.

(fn UPDATE? &optional SERVER-ID)" t)
(autoload 'lsp-uninstall-server "lsp-mode" "\
Delete a LSP server from `lsp-server-install-dir'.

(fn DIR)" t)
(autoload 'lsp-uninstall-servers "lsp-mode" "\
Uninstall all installed servers." t)
(autoload 'lsp-update-server "lsp-mode" "\
Interactively update (reinstall) a server.

(fn &optional SERVER-ID)" t)
(autoload 'lsp-update-servers "lsp-mode" "\
Update (reinstall) all installed servers." t)
(autoload 'lsp-ensure-server "lsp-mode" "\
Ensure server SERVER-ID

(fn SERVER-ID)")
(autoload 'lsp "lsp-mode" "\
Entry point for the server startup.
When ARG is t the lsp mode will start new language server even if
there is language server which can handle current language. When
ARG is nil current file will be opened in multi folder language
server if there is such. When `lsp' is called with prefix
argument ask the user to select which language server to start.

(fn &optional ARG)" t)
(autoload 'lsp-deferred "lsp-mode" "\
Entry point that defers server startup until buffer is visible.
`lsp-deferred' will wait until the buffer is visible before invoking `lsp'.
This avoids overloading the server with many files when starting Emacs.")
(autoload 'lsp-start-plain "lsp-mode" "\
Start `lsp-mode' using minimal configuration using the latest `melpa' version
of the packages.

In case the major-mode that you are using for " t)
(register-definition-prefixes "lsp-mode" '("defcustom-lsp" "lsp-" "make-lsp-client" "when-lsp-workspace" "with-lsp-workspace"))



(define-obsolete-variable-alias 'lsp-diagnostics-modeline-scope 'lsp-modeline-diagnostics-scope "\
lsp-mode 7.0.1")
(autoload 'lsp-modeline-code-actions-mode "lsp-modeline" "\
Toggle code actions on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Code-Actions mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-code-actions-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(define-obsolete-function-alias 'lsp-diagnostics-modeline-mode 'lsp-modeline-diagnostics-mode "lsp-mode 7.0.1")
(autoload 'lsp-modeline-diagnostics-mode "lsp-modeline" "\
Toggle diagnostics modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Diagnostics mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'lsp-modeline-workspace-status-mode "lsp-modeline" "\
Toggle workspace status on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Workspace-Status mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-workspace-status-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-modeline" '("lsp-"))



(register-definition-prefixes "lsp-mojo" '("lsp-mojo-executable"))



(register-definition-prefixes "lsp-move" '("lsp-clients-"))



(register-definition-prefixes "lsp-nextflow" '("lsp-nextflow-"))



(register-definition-prefixes "lsp-nginx" '("lsp-nginx-"))



(register-definition-prefixes "lsp-nim" '("lsp-nim-l"))



(register-definition-prefixes "lsp-nix" '("lsp-nix-"))



(register-definition-prefixes "lsp-nushell" '("lsp-nushell-language-server-command"))



(register-definition-prefixes "lsp-ocaml" '("lsp-"))



(register-definition-prefixes "lsp-openscad" '("lsp-openscad-"))



(register-definition-prefixes "lsp-perl" '("lsp-perl-"))



(register-definition-prefixes "lsp-perlnavigator" '("lsp-perlnavigator-"))



(register-definition-prefixes "lsp-php" '("lsp-"))



(register-definition-prefixes "lsp-pls" '("lsp-pls-"))



(register-definition-prefixes "lsp-prolog" '("lsp-prolog-server-command"))



(register-definition-prefixes "lsp-protocol" '("dash-expand:&RangeToPoint" "lsp"))



(register-definition-prefixes "lsp-purescript" '("lsp-purescript-"))



(register-definition-prefixes "lsp-pwsh" '("lsp-pwsh-"))



(register-definition-prefixes "lsp-pyls" '("lsp-"))



(register-definition-prefixes "lsp-pylsp" '("lsp-"))



(register-definition-prefixes "lsp-qml" '("lsp-qml-server-command"))



(register-definition-prefixes "lsp-r" '("lsp-clients-r-server-command"))



(register-definition-prefixes "lsp-racket" '("lsp-racket-lang"))



(register-definition-prefixes "lsp-remark" '("lsp-remark-server-command"))



(register-definition-prefixes "lsp-rf" '("expand-start-command" "lsp-rf-language-server-" "parse-rf-language-server-"))



(register-definition-prefixes "lsp-roslyn" '("lsp-roslyn-"))



(register-definition-prefixes "lsp-rpm-spec" '("lsp-rpm-spec-"))



(register-definition-prefixes "lsp-rubocop" '("lsp-rubocop-"))



(register-definition-prefixes "lsp-ruby-lsp" '("lsp-ruby-lsp-"))



(register-definition-prefixes "lsp-ruby-syntax-tree" '("lsp-ruby-syntax-tree-"))



(register-definition-prefixes "lsp-ruff" '("lsp-ruff-"))



(register-definition-prefixes "lsp-rust" '("lsp-"))



(defvar-local semantic-token-modifier-cache (make-hash-table) "\
A cache of modifier values to the selected fonts.
This allows whole-bitmap lookup instead of checking each bit. The
expectation is that usage of modifiers will tend to cluster, so
we will not have the full range of possible usages, hence a
tractable hash map.

This is set as buffer-local. It should probably be shared in a
given workspace/language-server combination.

This cache should be flushed every time any modifier
configuration changes.")
(autoload 'lsp--semantic-tokens-initialize-buffer "lsp-semantic-tokens" "\
Initialize the buffer for semantic tokens.
IS-RANGE-PROVIDER is non-nil when server supports range requests.")
(autoload 'lsp--semantic-tokens-initialize-workspace "lsp-semantic-tokens" "\
Initialize semantic tokens for WORKSPACE.

(fn WORKSPACE)")
(autoload 'lsp-semantic-tokens--warn-about-deprecated-setting "lsp-semantic-tokens" "\
Warn about deprecated semantic highlighting variable.")
(autoload 'lsp-semantic-tokens--enable "lsp-semantic-tokens" "\
Enable semantic tokens mode.")
(autoload 'lsp-semantic-tokens-mode "lsp-semantic-tokens" "\
Toggle semantic-tokens support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Semantic-Tokens mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-semantic-tokens-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-semantic-tokens" '("lsp-"))



(register-definition-prefixes "lsp-semgrep" '("lsp-semgrep-" "semgrep-"))



(register-definition-prefixes "lsp-sml" '("lsp-sml-millet-"))



(register-definition-prefixes "lsp-solargraph" '("lsp-solargraph-"))



(register-definition-prefixes "lsp-solidity" '("lsp-client--solidity-"))



(register-definition-prefixes "lsp-sorbet" '("lsp-sorbet-"))



(register-definition-prefixes "lsp-sql" '("lsp-sql-"))



(register-definition-prefixes "lsp-sqls" '("lsp-sql"))



(register-definition-prefixes "lsp-steep" '("lsp-steep-"))



(register-definition-prefixes "lsp-svelte" '("lsp-svelte-plugin-"))



(register-definition-prefixes "lsp-terraform" '("construct-tf-package" "lsp-t"))



(register-definition-prefixes "lsp-tex" '("lsp-"))



(register-definition-prefixes "lsp-toml" '("lsp-toml-"))



(register-definition-prefixes "lsp-trunk" '("lsp-trunk-"))



(register-definition-prefixes "lsp-ttcn3" '("lsp-ttcn3-lsp-server-command"))



(register-definition-prefixes "lsp-typeprof" '("lsp-typeprof-"))



(register-definition-prefixes "lsp-typespec" '("lsp-typespec-"))



(register-definition-prefixes "lsp-v" '("lsp-v-vls-executable"))



(register-definition-prefixes "lsp-vala" '("lsp-clients-vala-ls-executable"))



(register-definition-prefixes "lsp-verilog" '("lsp-clients-"))



(register-definition-prefixes "lsp-vetur" '("lsp-vetur-"))



(register-definition-prefixes "lsp-vhdl" '("ghdl-ls-bin-name" "hdl-checker-bin-name" "lsp-vhdl-" "vhdl-"))



(register-definition-prefixes "lsp-vimscript" '("lsp-clients-vim-"))



(register-definition-prefixes "lsp-volar" '("lsp-volar-"))



(register-definition-prefixes "lsp-wgsl" '("lsp-wgsl-"))



(register-definition-prefixes "lsp-xml" '("lsp-xml-"))



(register-definition-prefixes "lsp-yaml" '("lsp-yaml-"))



(register-definition-prefixes "lsp-yang" '("lsp-yang-"))



(register-definition-prefixes "lsp-zig" '("lsp-z"))


(provide 'lsp-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/legalese-20200119.2248/legalese-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/legalese-20200119.2248/legalese-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'legalese "legalese" "\
Add standard legalese prelude to the current buffer.

With prefix-argument ASK, ask for a license to use.

(fn ASK)" t)
(register-definition-prefixes "legalese" '("legalese-"))


(provide 'legalese-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/kotlin-ts-mode-20240917.1401/kotlin-ts-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/kotlin-ts-mode-20240917.1401/kotlin-ts-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'kotlin-ts-mode "kotlin-ts-mode" "\
Major mode for editing Kotlin using tree-sitter.

(fn)" t)
(register-definition-prefixes "kotlin-ts-mode" '("kotlin-ts-mode-"))


(provide 'kotlin-ts-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/kotlin-mode-20230123.1859/kotlin-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/kotlin-mode-20230123.1859/kotlin-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'kotlin-mode "kotlin-mode" "\
Major mode for editing Kotlin.

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.kts?\\'" . kotlin-mode) t)
(register-definition-prefixes "kotlin-mode" '("kotlin-"))



(register-definition-prefixes "kotlin-mode-indent" '("kotlin-"))



(register-definition-prefixes "kotlin-mode-lexer" '("kotlin-mode-"))


(provide 'kotlin-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/know-your-http-well-20240726.1649/know-your-http-well-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/know-your-http-well-20240726.1649/know-your-http-well-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'http-header "http-headers" "\
Display the meaning of an HTTP header

(fn HEADER)" t)
(register-definition-prefixes "http-headers" '("http-headers"))



(autoload 'http-method "http-methods" "\
Display the meaning of an HTTP method

(fn METHOD)" t)
(register-definition-prefixes "http-methods" '("http-methods"))



(autoload 'http-relation "http-relations" "\
Display the meaning of an HTTP relation

(fn RELATION)" t)
(register-definition-prefixes "http-relations" '("http-relations"))



(autoload 'http-status-code "http-status-codes" "\
Display the meaning of an HTTP status code or phrase

(fn STATUS)" t)
(register-definition-prefixes "http-status-codes" '("http-status"))



(autoload 'media-type "media-types" "\
Display the template of a media-type

(fn MEDIA-TYPE)" t)
(register-definition-prefixes "media-types" '("media-types"))


(provide 'know-your-http-well-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/just-mode-20240424.1809/just-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/just-mode-20240424.1809/just-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'just-mode "just-mode" "\
Major mode for editing standard Justfiles.

(fn)" t)
(add-to-list 'auto-mode-alist '("/[Jj]ustfile\\'" . just-mode))
(add-to-list 'auto-mode-alist '("\\.[Jj]ust\\(file\\)?\\'" . just-mode))
(register-definition-prefixes "just-mode" '("just-"))


(provide 'just-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/json-snatcher-20200916.1717/json-snatcher-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/json-snatcher-20200916.1717/json-snatcher-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'jsons-print-path "json-snatcher" "\
Print the path to the JSON value under point, and save it in the kill ring." t)
(register-definition-prefixes "json-snatcher" '("jsons-"))


(provide 'json-snatcher-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/json-mode-20240427.1245/json-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/json-mode-20240427.1245/json-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defconst json-mode-standard-file-ext '(".json" ".jsonld") "\
List of JSON file extensions.")
(defsubst json-mode--update-auto-mode (filenames) "\
Update the `json-mode' entry of `auto-mode-alist'.

FILENAMES should be a list of file as string.
Return the new `auto-mode-alist' entry" (let* ((new-regexp (rx-to-string `(seq (eval (cons 'or (append json-mode-standard-file-ext ',filenames))) eot))) (new-entry (cons new-regexp 'json-mode)) (old-entry (when (boundp 'json-mode--auto-mode-entry) json-mode--auto-mode-entry))) (setq auto-mode-alist (delete old-entry auto-mode-alist)) (add-to-list 'auto-mode-alist new-entry) new-entry))
(defvar json-mode-auto-mode-list '(".babelrc" ".bowerrc" "composer.lock") "\
List of filenames for the JSON entry of `auto-mode-alist'.

Note however that custom `json-mode' entries in `auto-mode-alist'
won’t be affected.")
(custom-autoload 'json-mode-auto-mode-list "json-mode" nil)
(defvar json-mode--auto-mode-entry (json-mode--update-auto-mode json-mode-auto-mode-list) "\
Regexp generated from the `json-mode-auto-mode-list'.")
(autoload 'json-mode "json-mode" "\
Major mode for editing JSON files.

(fn)" t)
(autoload 'jsonc-mode "json-mode" "\
Major mode for editing JSON files with comments.

(fn)" t)
(add-to-list 'magic-fallback-mode-alist '("^[{[]$" . json-mode))
(autoload 'json-mode-show-path "json-mode" "\
Print the path to the node at point to the minibuffer." t)
(autoload 'json-mode-kill-path "json-mode" "\
Save JSON path to object at point to kill ring." t)
(autoload 'json-mode-beautify "json-mode" "\
Beautify/pretty-print from BEGIN to END.

If the region is not active, beautify the entire buffer .

(fn BEGIN END)" t)
(register-definition-prefixes "json-mode" '("json"))


(provide 'json-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/concurrent-20170601.435/concurrent-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/concurrent-20170601.435/concurrent-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "concurrent" '("cc:"))


(provide 'concurrent-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/ctable-20210128.629/ctable-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/ctable-20210128.629/ctable-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "ctable" '("ctbl:"))


(provide 'ctable-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/epc-20140610.534/epc-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/epc-20140610.534/epc-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "epc" '("epc:"))



(register-definition-prefixes "epcs" '("epcs:"))


(provide 'epc-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/jedi-core-20210503.1315/jedi-core-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/jedi-core-20210503.1315/jedi-core-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'jedi:start-dedicated-server "jedi-core" "\
Start Jedi server dedicated to this buffer.
This is useful, for example, when you want to use different
`sys.path' for some buffer.  When invoked as an interactive
command, it asks you how to start the Jedi server.  You can edit
the command in minibuffer to specify the way Jedi server run.

If you want to setup how Jedi server is started programmatically
per-buffer/per-project basis, make `jedi:server-command' and
`jedi:server-args' buffer local and set it in `python-mode-hook'.
See also: `jedi:server-args'.

(fn COMMAND)" t)
(autoload 'helm-jedi-related-names "jedi-core" "\
Find related names of the object at point using `helm' interface." t)
(autoload 'anything-jedi-related-names "jedi-core" "\
Find related names of the object at point using `anything' interface." t)
(autoload 'jedi:setup "jedi-core" "\
Fully setup jedi.el for current buffer.
It setups `ac-sources' or `company-backends' and turns
`jedi-mode' on.

This function is intended to be called from `python-mode-hook',
like this::

       (add-hook 'python-mode-hook 'jedi:setup)

You can also call this function as a command, to quickly test
what jedi can do." t)
(autoload 'jedi:install-server "jedi-core" "\
This command installs Jedi server script jediepcserver.py in a
Python environment dedicated to Emacs.  By default, the
environment is at ``~/.emacs.d/.python-environments/default/``.
This environment is automatically created by ``virtualenv`` if it
does not exist.

Run this command (i.e., type ``M-x jedi:install-server RET``)
whenever Jedi.el shows a message to do so.  It is a good idea to
run this every time after you update Jedi.el to sync version of
Python modules used by Jedi.el and Jedi.el itself.

You can modify the location of the environment by changing
`jedi:environment-root' and/or `python-environment-directory'.  More
specifically, Jedi.el will install Python modules under the directory
``PYTHON-ENVIRONMENT-DIRECTORY/JEDI:ENVIRONMENT-ROOT``.  Note that you
need command line program ``virtualenv``.  If you have the command in
an unusual location, use `python-environment-virtualenv' to specify the
location.

.. NOTE:: jediepcserver.py is installed in a virtual environment but it
   does not mean Jedi.el cannot recognize the modules in virtual
   environment you are using for your Python development.  Jedi
   EPC server recognize the virtualenv it is in (i.e., the
   environment variable ``VIRTUAL_ENV`` in your Emacs) and then
   add modules in that environment to its ``sys.path``.  You can
   also add ``--virtual-env PATH/TO/ENV`` to `jedi:server-args'
   to include modules of virtual environment even you launch
   Emacs outside of the virtual environment.

.. NOTE:: It is highly recommended to use this command to install
   Python modules for Jedi.el.  You still can install Python
   modules used by Jedi.el manually.  However, you are then
   responsible for keeping Jedi.el and Python modules compatible.

See also:

- https://github.com/tkf/emacs-jedi/pull/72
- https://github.com/tkf/emacs-jedi/issues/140#issuecomment-37358527" t)
(autoload 'jedi:reinstall-server "jedi-core" "\
Reinstall Jedi server script jediepcserver.py." t)
(autoload 'jedi:install-server-block "jedi-core" "\
Blocking version `jedi:install-server'.")
(register-definition-prefixes "jedi-core" '("jedi"))


(provide 'jedi-core-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/auto-complete-20240320.1734/auto-complete-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/auto-complete-20240320.1734/auto-complete-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'auto-complete "auto-complete" "\
Start auto-completion at current point.

(fn &optional SOURCES)" t)
(autoload 'auto-complete-mode "auto-complete" "\
AutoComplete mode

This is a minor mode.  If called interactively, toggle the
`Auto-Complete mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `auto-complete-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-auto-complete-mode 'globalized-minor-mode t)
(defvar global-auto-complete-mode nil "\
Non-nil if Global Auto-Complete mode is enabled.
See the `global-auto-complete-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-auto-complete-mode'.")
(custom-autoload 'global-auto-complete-mode "auto-complete" nil)
(autoload 'global-auto-complete-mode "auto-complete" "\
Toggle Auto-Complete mode in all buffers.
With prefix ARG, enable Global Auto-Complete mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Auto-Complete mode is enabled in all buffers where
`auto-complete-mode-maybe' would do it.

See `auto-complete-mode' for more information on Auto-Complete mode.

(fn &optional ARG)" t)
(register-definition-prefixes "auto-complete" '("ac-" "auto-complete-mode"))



(autoload 'ac-config-default "auto-complete-config" "\
No documentation.")
(register-definition-prefixes "auto-complete-config" '("ac-"))


(provide 'auto-complete-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/jedi-20191011.1750/jedi-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/jedi-20191011.1750/jedi-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'jedi:ac-setup "jedi" "\
Add Jedi AC sources to `ac-sources'.

If auto-completion is all you need, you can call this function instead
of `jedi:setup', like this::

   (add-hook 'python-mode-hook 'jedi:ac-setup)

Note that this function calls `auto-complete-mode' if it is not
already enabled, for people who don't call `global-auto-complete-mode'
in their Emacs configuration." t)
(autoload 'jedi:complete "jedi" "\
Complete code at point.

(fn &key (EXPAND ac-expand-on-auto-complete))" t)
(autoload 'jedi:auto-complete-mode "jedi")
(setq jedi:setup-function #'jedi:ac-setup jedi:mode-function #'jedi:auto-complete-mode)
(register-definition-prefixes "jedi" '("jedi:"))


(provide 'jedi-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/httprepl-20141101.1734/httprepl-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/httprepl-20141101.1734/httprepl-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'httprepl "httprepl" "\
Interactively evaluate HTTP requests at a REPL-like
interface. Switches to the buffer specified by
`httprepl-buffer-name', or creates it if it does not exist. See
`httprepl-mode' for a reference on constructing requests." t)
(register-definition-prefixes "httprepl" '("httprepl-"))


(provide 'httprepl-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/highlight-indent-guides-20200820.2328/highlight-indent-guides-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/highlight-indent-guides-20200820.2328/highlight-indent-guides-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'highlight-indent-guides-auto-set-faces "highlight-indent-guides" "\
Automatically calculate indent guide faces.
If this feature is enabled, calculate reasonable values for the indent guide
colors based on the current theme's colorscheme, and set them appropriately.
This runs whenever a theme is loaded, but it can also be run interactively." t)
(autoload 'highlight-indent-guides-mode "highlight-indent-guides" "\
Display indent guides in a buffer.

This is a minor mode.  If called interactively, toggle the
`Highlight-Indent-Guides mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `highlight-indent-guides-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "highlight-indent-guides" '("highlight-indent-guides-"))


(provide 'highlight-indent-guides-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/groovy-mode-20230318.533/groovy-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/groovy-mode-20230318.533/groovy-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'groovy-electric-mode "groovy-electric" "\
Toggle Groovy Electric minor mode.

With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

When Groovy Electric mode is enabled, simple, double and back
quotes as well as braces are paired auto-magically. Expansion
does not occur inside comments and strings. Note that you must
have Font Lock enabled. ${ } is expanded when in a GString

This is a minor mode.  If called interactively, toggle the
`Groovy-Electric mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `groovy-electric-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "groovy-electric" '("groovy-electric-"))



(add-to-list 'auto-mode-alist '("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode))
(add-to-list 'auto-mode-alist '("/Jenkinsfile\\'" . groovy-mode))
(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))
(autoload 'groovy-mode "groovy-mode" "\
Major mode for editing Groovy code.

The hook `groovy-mode-hook' is run with no args at mode
initialization.

Key bindings:
\\{groovy-mode-map}

(fn)" t)
(register-definition-prefixes "groovy-mode" '("groovy-"))



(autoload 'inf-groovy-keys "inf-groovy" "\
Set local key defs for inf-groovy in `groovy-mode'.")
(autoload 'inferior-groovy-mode "inf-groovy" "\
Major mode for interacting with an inferior groovy (groovysh) process.

The following commands are available:
\\{inferior-groovy-mode-map}

A groovy process can be fired up with \\[run-groovy].

Customisation: Entry to this mode runs the hooks on
`comint-mode-hook' and `inferior-groovy-mode-hook' (in that order).

You can send text to the inferior groovy process from other buffers containing
Groovy source.
    `switch-to-groovy' switches the current buffer to the groovy process buffer.
    `groovy-send-definition' sends the current definition to the groovy process.
    `groovy-send-region' sends the current region to the groovy process.

    `groovy-send-definition-and-go', `groovy-send-region-and-go',
        switch to the groovy process buffer after sending their text.
For information on running multiple processes in multiple buffers, see
documentation for variable `groovy-buffer'.

Commands:
Return after the end of the process' output sends the text from the
    end of process to point.
Return before the end of the process' output copies the sexp ending at point
    to the end of the process' output, and sends it.
Delete converts tabs to spaces as it moves back.
Tab indents for groovy; with argument, shifts rest
    of expression rigidly with the current line.
\\<groovy-mode-map>
\\[prog-indent-sexp] does Tab on each line starting within following expression.
Paragraphs are separated only by blank lines.  # start comments.
If you accidentally suspend your process, use \\[comint-continue-subjob]
to continue it." t)
(autoload 'run-groovy "inf-groovy" "\
Run an inferior Groovy process, input and output via buffer *groovy*.
If there is a process already running in *groovy*, switch to that buffer.
With a prefix argument, prompt for the groovysh path and arguments
(see variables `groovysh' and `groovysh-args' for the defaults).

Runs the hook `inferior-groovy-mode-hook' (after the
`comint-mode-hook' is run).  Type \\[describe-mode] in the
process buffer for a list of commands.

(fn CMD)" t)
(eval-after-load 'groovy-mode (lambda nil (add-hook 'groovy-mode-hook 'inf-groovy-keys)))
(register-definition-prefixes "inf-groovy" '("groovy" "inf" "remove-in-string" "switch-to-groovy"))


(provide 'groovy-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/graphviz-dot-mode-20230325.1050/graphviz-dot-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/graphviz-dot-mode-20230325.1050/graphviz-dot-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'graphviz-dot-mode "graphviz-dot-mode" "\
Major mode for the dot language.

Functionallity specific to this mode:

  `indent-for-tab-command'    \\[indent-for-tab-command]
        Indents a single line.
  `graphviz-dot-preview'      \\[graphviz-dot-preview]
        Previews graph in a buffer.
  `graphviz-dot-view'         \\[graphviz-dot-view]
        Views graph in an external viewer.
  `graphviz-dot-indent-line'  \\[graphviz-dot-indent-line]
        Indents current line of code.

Variables specific to this mode:

  `graphviz-dot-dot-program'                   (default `dot')
       Program used to compile the graphs.
  `graphviz-dot-preview-extension'             (default `png')
       File type to use for output.
  `graphviz-dot-view-command'                  (default `dotty %s')
       Command to run when `graphviz-dot-view' is executed.
  `graphviz-dot-view-edit-command'             (default nil)
       If the user should be asked to edit the view command.
  `graphviz-dot-save-before-view'              (default t)
       Automatically save current buffer berore `graphviz-dot-view'.

(fn)" t)
(autoload 'graphviz-dot-preview "graphviz-dot-mode" "\
Compile the graph between BEGIN and END and preview it in an other buffer.
BEGIN (resp. END) is a number defaulting to `point-min' (resp. `point-max')
representing the current buffer's point where the graph definition starts
(resp. stops).

(fn &optional BEGIN END)" t)
(autoload 'graphviz-turn-on-live-preview "graphviz-dot-mode" "\
Turn on live preview.
This will update the preview on every save." t)
(autoload 'graphviz-turn-off-live-preview "graphviz-dot-mode" "\
Turn off live preview.
Saving the file will no longer also update the preview." t)
(add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode))
(add-to-list 'auto-mode-alist '("\\.gv\\'" . graphviz-dot-mode))
(register-definition-prefixes "graphviz-dot-mode" '("dot-menu" "graphviz-"))


(provide 'graphviz-dot-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/gotest-20230221.945/gotest-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/gotest-20230221.945/gotest-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'go-test-current-test-cache "gotest" "\
Repeat the previous current test execution." t)
(autoload 'go-test-current-test "gotest" "\
Launch go test on the current test.

(fn &optional LAST)" t)
(autoload 'go-test-current-file "gotest" "\
Launch go test on the current buffer file." t)
(autoload 'go-test-current-project "gotest" "\
Launch go test on the current project." t)
(autoload 'go-test-current-benchmark "gotest" "\
Launch go benchmark on current benchmark." t)
(autoload 'go-test-current-file-benchmarks "gotest" "\
Launch go benchmark on current file benchmarks." t)
(autoload 'go-test-current-project-benchmarks "gotest" "\
Launch go benchmark on current project." t)
(autoload 'go-test-current-coverage "gotest" "\
Launch go test coverage on the current project." t)
(autoload 'go-run "gotest" "\
Launch go run on current buffer file.

(fn &optional ARGS)" t)
(register-definition-prefixes "gotest" '("go-"))


(provide 'gotest-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/go-mode-20240620.1948/go-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/go-mode-20240620.1948/go-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'go-mode "go-mode" "\
Major mode for editing Go source text.

This mode provides (not just) basic editing capabilities for
working with Go code. It offers almost complete syntax
highlighting, indentation that is almost identical to gofmt and
proper parsing of the buffer content to allow features such as
navigation by function, manipulation of comments or detection of
strings.

In addition to these core features, it offers various features to
help with writing Go code. You can directly run buffer content
through gofmt, read godoc documentation from within Emacs, modify
and clean up the list of package imports or interact with the
Playground (uploading and downloading pastes).

The following extra functions are defined:

- `gofmt'
- `godoc' and `godoc-at-point'
- `go-import-add'
- `go-goto-arguments'
- `go-goto-docstring'
- `go-goto-function'
- `go-goto-function-name'
- `go-goto-imports'
- `go-goto-return-values'
- `go-goto-method-receiver'
- `go-play-buffer' and `go-play-region'
- `go-download-play'
- `godef-describe' and `godef-jump'
- `go-coverage'

If you want to automatically run `gofmt' before saving a file,
add the following hook to your Emacs configuration:

(add-hook 'before-save-hook #'gofmt-before-save)

If you want to use `godef-jump' instead of etags (or similar),
consider binding godef-jump to `M-.', which is the default key
for `find-tag':

(add-hook 'go-mode-hook (lambda ()
                          (local-set-key (kbd \"M-.\") #'godef-jump)))

Please note that godef is an external dependency. You can install
it with

go get github.com/rogpeppe/godef


If you're looking for even more integration with Go, namely
on-the-fly syntax checking, auto-completion and snippets, it is
recommended that you look at flycheck
(see URL `https://github.com/flycheck/flycheck') or flymake in combination
with goflymake (see URL `https://github.com/dougm/goflymake'), gocode
(see URL `https://github.com/nsf/gocode'), go-eldoc
(see URL `github.com/syohex/emacs-go-eldoc') and yasnippet-go
(see URL `https://github.com/dominikh/yasnippet-go')

(fn)" t)
(add-to-list 'auto-mode-alist (cons "\\.go\\'" 'go-mode))
(autoload 'gofmt-before-save "go-mode" "\
Add this to .emacs to run gofmt on the current buffer when saving:
(add-hook 'before-save-hook 'gofmt-before-save).

Note that this will cause ‘go-mode’ to get loaded the first time
you save any file, kind of defeating the point of autoloading." t)
(autoload 'godoc "go-mode" "\
Show Go documentation for QUERY, much like \\<go-mode-map>\\[man].

(fn QUERY)" t)
(autoload 'go-download-play "go-mode" "\
Download a paste from the playground and insert it in a Go buffer.
Tries to look for a URL at point.

(fn URL)" t)
(autoload 'go-dot-mod-mode "go-mode" "\
A major mode for editing go.mod files.

(fn)" t)
(add-to-list 'auto-mode-alist '("go\\.mod\\'" . go-dot-mod-mode))
(autoload 'go-dot-work-mode "go-mode" "\
A major mode for editor go.work files.

(fn)" t)
(add-to-list 'auto-mode-alist '("go\\.work\\'" . go-dot-work-mode))
(register-definition-prefixes "go-mode" '("go-" "god" "gofmt"))


(provide 'go-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/flycheck-20240726.456/flycheck-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/flycheck-20240726.456/flycheck-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'flycheck-manual "flycheck" "\
Open the Flycheck manual." t)
(autoload 'flycheck-quick-help "flycheck" "\
Display brief Flycheck help." t)
(autoload 'flycheck-mode "flycheck" "\
Flycheck is a minor mode for on-the-fly syntax checking.

In `flycheck-mode' the buffer is automatically syntax-checked
using the first suitable syntax checker from `flycheck-checkers'.
Use `flycheck-select-checker' to select a checker for the current
buffer manually.

If you run into issues, use `\\[flycheck-verify-setup]' to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
`https://www.flycheck.org/en/latest/'.  Please report issues and
request features at URL `https://github.com/flycheck/flycheck'.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

`FlyC'     This buffer has not been checked yet.
`FlyC*'    Flycheck is running.  Expect results soon!
`FlyC:0'   Last check resulted in no errors and no warnings.
`FlyC:3|5' This buffer contains three errors and five warnings.
           Use `\\[flycheck-list-errors]' to see the list.
`FlyC-'    Flycheck doesn't have a checker for this buffer.

You may also see the following icons:
`FlyC!'    The checker crashed.
`FlyC.'    The last syntax check was manually interrupted.
`FlyC?'    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in `flycheck-mode':

\\{flycheck-mode-map}
(you can change the prefix by customizing
`flycheck-keymap-prefix')

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

(fn &optional ARG)" t)
(put 'global-flycheck-mode 'globalized-minor-mode t)
(defvar global-flycheck-mode nil "\
Non-nil if Global Flycheck mode is enabled.
See the `global-flycheck-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-mode'.")
(custom-autoload 'global-flycheck-mode "flycheck" nil)
(autoload 'global-flycheck-mode "flycheck" "\
Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Flycheck mode is enabled in all buffers where `flycheck-mode-on-safe'
would do it.

See `flycheck-mode' for more information on Flycheck mode.

(fn &optional ARG)" t)
(autoload 'flycheck-define-error-level "flycheck" "\
Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

`:severity SEVERITY'
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0; info is -10, warning is 10, and
     error is 100.

     The severity is used by `flycheck-error-level-<' to
     determine the ordering of errors according to their levels.

`:compilation-level LEVEL'

     A number indicating the broad class of messages that errors
     at this level belong to: one of 0 (info), 1 (warning), or
     2 or nil (error).  Defaults to nil.

     This is used by `flycheck-checker-pattern-to-error-regexp'
     to map error levels into `compilation-mode''s hierarchy and
     to get proper highlighting of errors in `compilation-mode'.

`:overlay-category CATEGORY'
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node `(elisp)Overlay Properties' for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the `face' property, for error highlighting.  Another useful
     property for error level categories is `priority', to
     influence the stacking of multiple error level overlays.

`:fringe-bitmap BITMAPS'
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level, or a cons of two bitmaps (one for
     narrow fringes and one for wide fringes).  See Info node
     `(elisp)Fringe Bitmaps' for more information about fringe
     bitmaps, including a list of built-in fringe bitmaps.

`:fringe-face FACE'
     A face symbol denoting the face to use for fringe indicators
     for this level.

`:margin-spec SPEC'
     A display specification indicating what to display in the
     margin when `flycheck-indication-mode' is `left-margin' or
     `right-margin'.  See Info node `(elisp)Displaying in the
     Margins'.  If omitted, Flycheck generates an image spec from
     the fringe bitmap.

`:error-list-face FACE'
     A face symbol denoting the face to use for messages of this
     level in the error list.  See `flycheck-list-errors'.

(fn LEVEL &rest PROPERTIES)")
(function-put 'flycheck-define-error-level 'lisp-indent-function 1)
(autoload 'flycheck-define-command-checker "flycheck" "\
Define SYMBOL as syntax checker to run a command.

Define SYMBOL as generic syntax checker via
`flycheck-define-generic-checker', which uses an external command
to check the buffer.  SYMBOL and DOCSTRING are the same as for
`flycheck-define-generic-checker'.

In addition to the properties understood by
`flycheck-define-generic-checker', the following PROPERTIES
constitute a command syntax checker.  Unless otherwise noted, all
properties are mandatory.  Note that the default `:error-filter'
of command checkers is `flycheck-sanitize-errors'.

`:command COMMAND'
     The command to run for syntax checking.

     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.

     EXECUTABLE is a string with the executable of this syntax
     checker.  It can be overridden with the variable
     `flycheck-SYMBOL-executable'.  Note that this variable is
     NOT implicitly defined by this function.  Use
     `flycheck-def-executable-var' to define this variable.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     `flycheck-substitute-argument', which see.

`:error-patterns PATTERNS'
     A list of patterns to parse the output of the `:command'.

     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where
     LEVEL is a Flycheck error level (see
     `flycheck-define-error-level'), followed by one or more RX
     `SEXP's which parse an error of that level and extract line,
     column, file name and the message.

     See `rx' for general information about RX, and
     `flycheck-rx-to-string' for some special RX forms provided
     by Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

     This property is optional.  If omitted, however, an
     `:error-parser' is mandatory.

`:error-parser FUNCTION'
     A function to parse errors with.

     The function shall accept three arguments OUTPUT CHECKER
     BUFFER.  OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of `flycheck-error' objects parsed from
     OUTPUT.

     This property is optional.  If omitted, it defaults to
     `flycheck-parse-with-patterns'.  In this case,
     `:error-patterns' is mandatory.

`:standard-input t'
     Whether to send the buffer contents on standard input.

     If this property is given and has a non-nil value, send the
     contents of the buffer on standard input.

     Some checkers that support reading from standard input have
     a separate flag to indicate the name of the file whose
     contents are being passed on standard input (typically
     `stdin-filename').  In that case, use the `(option)' form in
     `:command' to pass the value of variable `buffer-file-name'
     when the current buffer has a file name (that is,
     use `option \"--stdin-file-name\" buffer-file-name').

     For buffers not backed by files, checkers that support input
     on stdin typically report a file name like `-' or `<stdin>'.
     Make sure your error parser or patterns expect these file
     names (for example, use `(or \"<stdin>\" (file-name))') or
     call `flycheck-remove-error-file-names' in a custom
     `:error-filter'.

     Defaults to nil.

Note that you may not give `:start', `:interrupt', and
`:print-doc' for a command checker.  You can give a custom
`:verify' function, though, whose results will be appended to the
default `:verify' function of command checkers.

(fn SYMBOL DOCSTRING &rest PROPERTIES)")
(function-put 'flycheck-define-command-checker 'lisp-indent-function 1)
(function-put 'flycheck-define-command-checker 'doc-string-elt 2)
(autoload 'flycheck-def-config-file-var "flycheck" "\
Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable variable using `defcustom', to
provide configuration files for the given syntax CHECKER.
CUSTOM-ARGS are forwarded to `defcustom'.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.  It can be either a string or a list of
strings.

Use this together with the `config-file' form in the `:command'
argument to `flycheck-define-checker'.

(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)
(function-put 'flycheck-def-config-file-var 'lisp-indent-function 3)
(autoload 'flycheck-def-option-var "flycheck" "\
Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable using `defcustom', to
provide an option for the given syntax CHECKERS (a checker or a
list of checkers).  INIT-VALUE is the initial value of the
variable, and DOCSTRING is its docstring.  CUSTOM-ARGS are
forwarded to `defcustom'.

Use this together with the `option', `option-list' and
`option-flag' forms in the `:command' argument to
`flycheck-define-checker'.

(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)
(function-put 'flycheck-def-option-var 'lisp-indent-function 3)
(function-put 'flycheck-def-option-var 'doc-string-elt 4)
(autoload 'flycheck-define-checker "flycheck" "\
Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.

Like `flycheck-define-command-checker', but PROPERTIES must not
be quoted.  Also, implicitly define the executable variable for
SYMBOL with `flycheck-def-executable-var'.

(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)
(function-put 'flycheck-define-checker 'lisp-indent-function 1)
(function-put 'flycheck-define-checker 'doc-string-elt 2)
(register-definition-prefixes "flycheck" '("flycheck-" "help-flycheck-checker-d" "list-flycheck-errors"))



(register-definition-prefixes "flycheck-buttercup" '("flycheck-buttercup-format-error-list"))



(register-definition-prefixes "flycheck-ert" '("flycheck-er"))


(provide 'flycheck-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/flycheck-color-mode-line-20230106.1829/flycheck-color-mode-line-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/flycheck-color-mode-line-20230106.1829/flycheck-color-mode-line-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'flycheck-color-mode-line-mode "flycheck-color-mode-line" "\
Minor mode to color the mode line with the Flycheck status.

When called interactively, toggle
`flycheck-color-mode-line-mode'.  With prefix ARG, enable
`flycheck-color-mode-line-mode' if ARG is positive, otherwise
disable it.

When called from Lisp, enable `flycheck-color-mode-line-mode' if ARG is omitted,
nil or positive.  If ARG is `toggle', toggle `flycheck-color-mode-line-mode'.
Otherwise behave as if called interactively.

(fn &optional ARG)" t)
(custom-add-frequent-value 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
(register-definition-prefixes "flycheck-color-mode-line" '("flycheck-color-mode-line-"))


(provide 'flycheck-color-mode-line-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/dumb-jump-20240625.224/dumb-jump-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/dumb-jump-20240625.224/dumb-jump-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar dumb-jump-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "C-M-g") 'dumb-jump-go) (define-key map (kbd "C-M-p") 'dumb-jump-back) (define-key map (kbd "C-M-q") 'dumb-jump-quick-look) map))
(autoload 'dumb-jump-back "dumb-jump" "\
Jump back to where the last jump was done." t)
(autoload 'dumb-jump-quick-look "dumb-jump" "\
Run dumb-jump-go in quick look mode.  That is, show a tooltip of where it would jump instead." t)
(autoload 'dumb-jump-go-other-window "dumb-jump" "\
Like 'dumb-jump-go' but use 'find-file-other-window' instead of 'find-file'." t)
(autoload 'dumb-jump-go-current-window "dumb-jump" "\
Like dumb-jump-go but always use 'find-file'." t)
(autoload 'dumb-jump-go-prefer-external "dumb-jump" "\
Like dumb-jump-go but prefer external matches from the current file." t)
(autoload 'dumb-jump-go-prompt "dumb-jump" "\
Like dumb-jump-go but prompts for function instead of using under point" t)
(autoload 'dumb-jump-go-prefer-external-other-window "dumb-jump" "\
Like dumb-jump-go-prefer-external but use 'find-file-other-window' instead of 'find-file'." t)
(autoload 'dumb-jump-go "dumb-jump" "\
Go to the function/variable declaration for thing at point.
When USE-TOOLTIP is t a tooltip jump preview will show instead.
When PREFER-EXTERNAL is t it will sort external matches before
current file.

(fn &optional USE-TOOLTIP PREFER-EXTERNAL PROMPT)" t)
(defvar dumb-jump-mode nil "\
Non-nil if Dumb-Jump mode is enabled.
See the `dumb-jump-mode' command
for a description of this minor mode.")
(custom-autoload 'dumb-jump-mode "dumb-jump" nil)
(autoload 'dumb-jump-mode "dumb-jump" "\
Minor mode for jumping to variable and function definitions

This is a global minor mode.  If called interactively, toggle the
`Dumb-Jump mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dumb-jump-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'dumb-jump-xref-activate "dumb-jump" "\
Function to activate xref backend.
Add this function to `xref-backend-functions' to dumb jump to be
activiated, whenever it finds a project. It is recommended to add
it to the end, so that it only gets activated when no better
option is found.")
(register-definition-prefixes "dumb-jump" '("dumb-jump-"))


(provide 'dumb-jump-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/dockerfile-mode-20240914.1549/dockerfile-mode-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/dockerfile-mode-20240914.1549/dockerfile-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'dockerfile-build-buffer "dockerfile-mode" "\
Build an image called IMAGE-NAME based upon the buffer.

If the prefix arg NO-CACHE is set, don't cache the image.

The shell command used to build the image is:

    sudo docker build    \\
      --no-cache         \\
      --force-rm         \\
      --pull             \\
      --tag IMAGE-NAME   \\
      --build-args args  \\
      --progress type    \\
      -f filename        \\
      directory

(fn IMAGE-NAME &optional NO-CACHE)" t)
(autoload 'dockerfile-build-no-cache-buffer "dockerfile-mode" "\
Build an image called IMAGE-NAME based upon the buffer without cache.

(fn IMAGE-NAME)" t)
(autoload 'dockerfile-mode "dockerfile-mode" "\
A major mode to edit Dockerfiles.
\\{dockerfile-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist (cons (concat "[/\\]" "\\(?:Containerfile\\|Dockerfile\\)" "\\(?:\\.[^/\\]*\\)?\\'") 'dockerfile-mode))
(add-to-list 'auto-mode-alist '("\\.dockerfile\\'" . dockerfile-mode))
(register-definition-prefixes "dockerfile-mode" '("dockerfile-"))


(provide 'dockerfile-mode-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/backup-each-save-20180227.557/backup-each-save-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/backup-each-save-20180227.557/backup-each-save-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'backup-each-save "backup-each-save")
(register-definition-prefixes "backup-each-save" '("backup-each-save-"))


(provide 'backup-each-save-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/auto-complete-rst-20140225.944/auto-complete-rst-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/auto-complete-rst-20140225.944/auto-complete-rst-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "auto-complete-rst" '("ac-source-rst-" "auto-complete-rst-"))


(provide 'auto-complete-rst-autoloads)


)
(let ((load-true-file-name "/Users/stpierre/.emacs.d/elpa/auto-complete-nxml-20140221.458/auto-complete-nxml-autoloads.el")(load-file-name "/Users/stpierre/.emacs.d/elpa/auto-complete-nxml-20140221.458/auto-complete-nxml-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "auto-complete-nxml" '("ac-source-nxml-" "auto-complete-nxml-"))


(provide 'auto-complete-nxml-autoloads)


)
(defvar package-activated-list)
(setq package-activated-list
      (delete-dups
       (append
        '(yaml-mode window-jump tsc compat transient hcl-mode dash terraform-mode reformatter sqlformat spinner s sphinx-doc solarized-theme scss-mode rpm-spec-mode pyvenv f pythonic python-mode deferred python-environment python-black pyenv-mode py-isort popup poetry markdown-mode lv ht lsp-mode legalese kotlin-ts-mode kotlin-mode know-your-http-well just-mode json-snatcher json-mode concurrent ctable epc jedi-core auto-complete jedi httprepl highlight-indent-guides groovy-mode graphviz-dot-mode gotest go-mode flycheck flycheck-color-mode-line dumb-jump dockerfile-mode backup-each-save auto-complete-rst auto-complete-nxml)
        package-activated-list)))
(progn
  (require 'info)
  (info-initialize)
  (setq Info-directory-list
        (append
         '("/Users/stpierre/.emacs.d/elpa/dash-20240510.1327" "/Users/stpierre/.emacs.d/elpa/transient-20241125.1302" "/Users/stpierre/.emacs.d/elpa/compat-30.0.0.0")
         Info-directory-list)))

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; byte-compile-warnings: (not make-local)
;; End:
